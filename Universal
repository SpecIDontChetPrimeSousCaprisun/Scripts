PLR = game:GetService("Players").LocalPlayer
Char = PLR.Character or PLR.CharacterAdded:Wait()
UIS = game:GetService("UserInputService")
TW = game.TweenService
Key = Enum.KeyCode.H
BindingKey = nil
Cam = workspace.CurrentCamera
MouseBehavior = Enum.MouseBehavior.Default
MouseVisible = true
CustomCursor = false
HoverSound = Instance.new("Sound")
ClickSound = Instance.new("Sound")

VineBoom = Instance.new("Sound")

VineBoom.SoundId = "rbxassetid://5178876770"
VineBoom.Parent = game.SoundService
HoverSound.Parent = game.SoundService
HoverSound.SoundId = "rbxassetid://92876108656319"
ClickSound.Parent = game.SoundService
ClickSound.SoundId = "rbxassetid://6042053626"

Tabs = {
	Home = {},
	Movement = {},
	Aimbot = {},
	Other = {},
	None = {}
}
CurrentTab = "None"

if PLR:HasTag("GoatUHubed") then

	local MenuUI = Instance.new("ScreenGui")
	local ImgLabel = Instance.new("ImageLabel")

	ImgLabel.Size = UDim2.new(1,0,1,0)
	ImgLabel.Image = "http://www.roblox.com/asset/?id=75982668557119"
	ImgLabel.BackgroundTransparency = 1
	ImgLabel.Parent = MenuUI
	MenuUI.Parent = game:GetService("CoreGui").CaptureOverlay

	game.TweenService:Create(ImgLabel, TweenInfo.new(2.5, Enum.EasingStyle.Linear), {ImageTransparency = 1}):Play()
	VineBoom:Play()

	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Goat Hub",
		Text = "You aldready have an instance of goat hub running if you want to change versions then rejoin the game beafore injecting it again"
	})
	error("You aldready have an instance of goat hub running if you want to change versions then rejoin the game beafore injecting it again")

end 

game:GetService("StarterGui"):SetCore("SendNotification", {
	Title = "Goat Hub",
	Text = "SucessFully ran goat hub universal please wait..."
})

--if PLR:HasTag("GoatHubed") then error("You aldready have an instance of goat hub running if you want to change versions then rejoin the game beafore injecting it again") end
PLR:AddTag("GoatUHubed")

-- Varibles pour la chaise gaming
KeybindsActive = true
KDB = false
KeybindsWhitelist = {}

OldCollides = {}
FlyEnabled = false
FlyKey = Enum.KeyCode.F
FlySpeed = 0
NoclipEnabled = false
local OldWS
DefaultGrav = workspace.Gravity
InfJumpEnabled = false
InfJumpKey = Enum.KeyCode.M

SpeedEnabled = false
SpeedKey = Enum.KeyCode.G
SpeedSpeed = 0

CTPEnabled = false
CTPKey = Enum.KeyCode.P
CTPParams = RaycastParams.new()
CTPParams.FilterDescendantsInstances = {Char}
CTPParams.RespectCanCollide = false
CTPParams.IgnoreWater = true

PTPKey = Enum.KeyCode.L
PlayerToTP = game:GetService("Players"):GetPlayers()[1]
local OldPTPConnection

CLockEnabled = false
CLockKey = nil
CLockFovEnabled = nil
FovVisible = nil
FovSize = 100  
FovRainbowEnabled = nil
KOCheck = nil
WallCheck = nil
TeamCheck = nil

TriggerbotEnabled = nil
TriggerbotKeybind = Enum.KeyCode.V
TriggerbotMode = "OnM1"
TriggerbotModes = {
	"Auto",
	"OnM1"
}

AimbotEnabled = false
AimbotKey = Enum.KeyCode.C
AimbotSmoothness = 0

FlingEnabled = false
FlingTarget = game:GetService("Players"):GetPlayers()[1]
FlingKey = nil
FlingWhitelist = {}
FlingSitCheck = true
FlingFriendCheck = false
FlingTeamCheck = false
FlingLoop = false
FlingTool = Instance.new("Tool")

FlingTool.CanBeDropped = nil
FlingTool.RequiresHandle = nil
FlingTool.Name = "FlingTool"
FlingTool.ToolTip = "A tool used to fling people. Have fun !!!"
FlingToolParams = RaycastParams.new()
FlingToolParams.FilterType = Enum.RaycastFilterType.Exclude
FlingToolParamsWhitelist = {}

ESPEnabled = false
ESPNameEnabled = false
ESPColorEnabled = false
ESPRainbowEnabled = false
ESPLinesEnabled = false
ESPTeamColor = false
ESPKey = Enum.KeyCode.N
ESPGui = Instance.new("ScreenGui", game:GetService("CoreGui").CaptureOverlay)
ESPColor = Color3.fromRGB(255,255,0)
ESPOutlineType = "None"
ESPTypeNum = 1
NotTargettedESPColor = Color3.new(1,1,1)
NoEffectESPColor = Color3.new(1,1,1)
ESPGui.ResetOnSpawn = nil
ESPGui.Name = "EspGui"
ESPGui.IgnoreGuiInset = true

DeleteTool = Instance.new("Tool")
DeleteTool.RequiresHandle = false
DeleteTool.Name = "DeleteTool"
FlingTool.ToolTip = "Delete things ig"

ESPOutlineTypes = {[1] = "None", [2] = "Highlight", [3] = "Box"}

local BangEnabled = false
local BangKey = Enum.KeyCode.B
local BangType = "Back"
local PlayerToBang = game:GetService("Players"):GetPlayers()[1]

local RTKey = Enum.KeyCode.K
local RTMessages = {
	"Are you a bus ? Cuz i want to fill you with kids",
	"I love you dady",
	"Are you didi ? Cuz i want ALL YOUR BABY OIL !",
	"Am i a minecraft youtuber ? Yes cuz imma mollest you",
	"Come here and kiss me on my hot mouth, am feeling romantical today"
}

local TTKey = Enum.KeyCode.J
local TTMessages = {
	"EZZ",
	"Ur not humbled lil bro",
	"Get atomised by a vr user",
	"Cronus on top",
	"Its vr am flying irl",
	"V4 and loose",
	"Spec i dont chet"
}

ChatArtColor = Color3.new(0,0,0)
ChatArtColorsToText = {
	[Color3.new(1, 1, 1)] = "âšª",
	[Color3.new(0, 0, 0)] = "âš«",
	[Color3.new(1, 0, 0)] = "ðŸ”´",
	[Color3.new(0, 0, 1)] = "ðŸ”µ"
}

ChatArtColorsToTextFrThisTime = {
	["1, 1, 1"] = "âšª",
	["0, 0, 0"] = "âš«",
	["1, 0, 0"] = "ðŸ”´",
	["1, 0.5, 0"] = "ðŸŸ ",
	["1, 1, 0"] = "ðŸŸ¡",
	["0, 1, 0"] = "ðŸŸ¢",
	["0, 0, 1"] = "ðŸ”µ",
	["0.666667, 0.333333, 0"] = "ðŸŸ¤",
	["0.75, 0, 0.5"] = "ðŸŸ£"
}

-- Creation du hub

MenuUI = Instance.new("ScreenGui")
Cursor = Instance.new("ImageLabel", MenuUI)
AlwaysEnabled = Instance.new("ScreenGui")
MenuFrame = Instance.new("Frame", MenuUI)
MenuFrameDrag = Instance.new("UIDragDetector", MenuFrame)
MenuFrameCorner = Instance.new("UICorner", MenuFrame)
MenuFrameRatio = Instance.new("UIAspectRatioConstraint")

MenuFrame.Size = UDim2.new(0.5,0,0.5,0)
MenuFrame.Position = UDim2.new(0.5,0,0.5,0)
MenuFrame.AnchorPoint  = Vector2.new(0.5,0.5)
MenuFrame.BackgroundColor3 = Color3.fromRGB(45,45,45)
MenuFrame.BackgroundTransparency = 0.25
MenuFrame.ClipsDescendants = true

MenuFrameDrag.ResponseStyle = Enum.UIDragDetectorResponseStyle.Scale
MenuFrameDrag.BoundingUI = NameLabel
MenuFrameCorner.CornerRadius = UDim.new(0.1,0)
MenuFrameRatio.AspectRatio = 2.03
MenuFrameRatio.Parent = MenuFrame

VerUI = Instance.new("ScreenGui")
VerFrame = MenuFrame:Clone()
VerFrame.Parent = VerUI
VerFrame.UIDragDetector:Destroy()

NameLabel = Instance.new("TextLabel", MenuFrame)
ExitButton = Instance.new("TextButton", MenuFrame)
Options = Instance.new("Frame", MenuFrame)

TabsFrame = Instance.new("Frame", MenuFrame)
TabsUiLayout = Instance.new("UIListLayout", TabsFrame)

NameLabelCorner = Instance.new("UICorner", NameLabel)
NameLabelShadow = Instance.new("Frame", MenuFrame)

ExitButtonCorner = Instance.new("UICorner", ExitButton)
ExitButtonRatio = Instance.new("UIAspectRatioConstraint")

OptionsLayout = Instance.new("UIGridLayout", Options)

FlyFrame = Instance.new("Frame", Options)

FlyCorner = Instance.new("UICorner", FlyFrame)
FlyOptionLayout = Instance.new("UIListLayout", FlyFrame)

MenuUI.ResetOnSpawn = nil
MenuUI.Name = "GoatHub UNIVERSAL"
Cursor.Size = UDim2.fromScale(0.05, 0.05)
Cursor.AnchorPoint = Vector2.new(0,1)
Cursor.BackgroundTransparency = 1
Cursor.ZIndex = 2147483647
Instance.new("UIAspectRatioConstraint", Cursor)

AlwaysEnabled.Name = "GoatHub Always Enabled"

NameLabel.Name = "NameLabel"
NameLabel.Size = UDim2.new(1,0,0.1,0)
NameLabel.Position = UDim2.new(0,0,0,0)
NameLabel.BackgroundColor3 = Color3.fromRGB(45,45,45)
NameLabel.Text = "GH"
NameLabel.TextColor3 = Color3.new(1,1,1)
NameLabel.Font = Enum.Font.Michroma
NameLabel.TextXAlignment = Enum.TextXAlignment.Left
NameLabel.ZIndex = 5
NameLabel.TextScaled = true

NameLabelCorner.CornerRadius = UDim.new(1,0)
NameLabelShadow.Name = "NameBackGround"
NameLabelShadow.BackgroundColor3 = Color3.fromRGB(45,45,45)
NameLabelShadow.Size = UDim2.new(1, 0,0.055, 0)
NameLabelShadow.Position = UDim2.new(0, 0,0.045, 0)

ExitButton.Name = "ExitButton"
ExitButton.Size = UDim2.new(0.08, 0,0.08, 0)
ExitButton.Position = UDim2.new(0.937, 0,0.008, 0)
ExitButton.BackgroundColor3 = Color3.new(1,0,0)
ExitButton.Text = "X"
ExitButton.TextColor3 = Color3.new(1,1,1)
ExitButton.ZIndex = 99999

ExitButtonCorner.CornerRadius = UDim.new(1,0)
ExitButtonRatio.AspectRatio = 1
ExitButtonRatio.Parent = ExitButton

Options.Name = "Options"
Options.Position = UDim2.new(0.026,0,0.139,0)
Options.Size = UDim2.new(0.95, 0,0.783, 0)
Options.Transparency = 1

ChatArtFrame = MenuFrame:Clone()
ChatArtFrame.Name = "ChatArtEditor"
ChatArtFrame.Parent = MenuUI
ChatArtFrame.UIDragDetector:Destroy()
ChatArtFrame.Visible  = nil
ChatArtFrame.NameLabel.Text = "Chat art editor"
ChatArtRatio = ChatArtFrame.UIAspectRatioConstraint

ChatArtEditFrame = ChatArtFrame.Options
ChatArtEditFrame.Name = "EditFrame"
ChatArtEditFrame.AnchorPoint = Vector2.new(0.25, 0.5)
ChatArtEditFrame.Position = UDim2.fromScale(0.25, 0.5)
ChatArtEditFrame.Frame:Destroy()
ChatArtEditFrameLayout = ChatArtEditFrame.UIGridLayout
ChatArtEditRatio = Instance.new("UIAspectRatioConstraint", ChatArtEditFrame)
Instance.new("UIAspectRatioConstraint", ChatArtEditFrameLayout)
ChatArtEditFrameLayout.CellSize = UDim2.fromScale(0.125, 0.125)
ChatArtEditFrameLayout.SortOrder = Enum.SortOrder.LayoutOrder

ChatArtButtonsFrame = Instance.new("Frame", ChatArtFrame)
ChatArtButtonsFrame.AnchorPoint = Vector2.new(1,1)
ChatArtButtonsFrame.Position = UDim2.new(1,0,1,0)
ChatArtButtonsFrame.Size = UDim2.new(0.2, 0, 0.78,1)
ChatArtButtonsFrame.BackgroundColor3 = Color3.fromRGB(45,45,45)

ChatArtButtonsFrameLayout = Instance.new("UIGridLayout", ChatArtButtonsFrame)
ChatArtButtonsFrameLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
ChatArtButtonsFrameLayout.VerticalAlignment = Enum.VerticalAlignment.Top
ChatArtButtonsFrameLayout.SortOrder = Enum.SortOrder.LayoutOrder
ChatArtButtonsFrameLayout.FillDirection = Enum.FillDirection.Vertical
ChatArtButtonsFrameLayout.CellSize = UDim2.fromScale(0.25, 0.25)
Instance.new("UIAspectRatioConstraint", ChatArtButtonsFrameLayout)

ChatArtSendButton = Instance.new("TextButton", ChatArtFrame)
ChatArtSendButton.Text = "Send"
ChatArtSendButton.AnchorPoint = Vector2.new(0.5, 0.5)
ChatArtSendButton.Position = UDim2.fromScale(0.65, 0.8)
ChatArtSendButton.Size = UDim2.fromScale(0.1, 0.1)

OptionsLayout.CellSize = UDim2.new(0.25,0,1,0)
OptionsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
OptionsLayout.SortOrder = Enum.SortOrder.LayoutOrder

TabsFrame.AnchorPoint = Vector2.new(1,1)
TabsFrame.Position = UDim2.new(1,0,1,0)
TabsFrame.Size = UDim2.new(0.1, 0, 0.78,1)
TabsFrame.BackgroundColor3 = Color3.fromRGB(45,45,45)

TabsUiLayout.Padding = UDim.new(0.05)
TabsUiLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
TabsUiLayout.VerticalAlignment = Enum.VerticalAlignment.Top
TabsUiLayout.SortOrder = Enum.SortOrder.LayoutOrder
TabsUiLayout.FillDirection = Enum.FillDirection.Vertical

MenuFrameCorner:Clone().Parent = TabsFrame

VerBox = Instance.new("TextLabel", VerFrame)
SafeButton = Instance.new("TextButton", VerFrame)
SafeButtonCorner = Instance.new("UICorner", SafeButton)
SafeButtonStroke = Instance.new("UIStroke", SafeButton)

VerBox.BackgroundTransparency = 1
VerBox.Size = UDim2.fromScale(0.75, 0.5)
VerBox.Position = UDim2.fromScale(0.5, 0.34)
VerBox.Text = "Do you wish to launch the safe version or have more options like speed ?"
VerBox.Font = Enum.Font.FredokaOne
VerBox.TextScaled = true
VerBox.AnchorPoint = Vector2.new(0.5, 0.5)
VerBox.TextColor3 = Color3.new(1,1,1)

SafeButton.Position = UDim2.fromScale(0.25, 0.75)
SafeButton.Size = UDim2.fromScale(0.2, 0.1)
SafeButton.BackgroundColor3 = Color3.new(0,1,0)
SafeButton.Text = "Safe"
SafeButton.Font = Enum.Font.FredokaOne
SafeButton.TextColor3 = Color3.new(1,1,1)
SafeButton.AnchorPoint = Vector2.new(0.5, 0.5)
SafeButton.TextScaled = true
SafeButtonCorner.CornerRadius = UDim.new(1,0)
SafeButtonStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
SafeButtonStroke.Thickness = 3
SafeButtonStroke.Color = Color3.new(1,1,1)

NotSafeButton = SafeButton:Clone()

NotSafeButton.Position = UDim2.fromScale(0.75, 0.75)
NotSafeButton.Text = "More options"
NotSafeButton.BackgroundColor3 = Color3.new(1,0,0)
NotSafeButton.Font = Enum.Font.FredokaOne

NotSafeButton.Parent = VerFrame


VerUI.Parent = game:GetService("CoreGui").CaptureOverlay

Ansered = false
local Ver

SafeButton.MouseButton1Down:Once(function()

	Ver = "Safe"
	Ansered = true
	Cursor.BackgroundTransparency = 0

end)


NotSafeButton.MouseButton1Down:Once(function()

	Ver = "NotSafe"
	Ansered = true
	Cursor.Image = "rbxassetid://70823320771207"

end)

repeat wait() until Ansered

VerUI:Destroy()

if Ver == "Safe" then

	MenuUI.Parent = game:GetService("CoreGui").CaptureOverlay

else

	MenuUI.Parent = game:GetService("CoreGui")

end

AlwaysEnabled.Parent = MenuUI.Parent
ESPGui.Parent = MenuUI.Parent

local function NewTab(Tab, LayoutOrder, Img)

	local Button = Instance.new("ImageButton", TabsFrame)
	local ButtonCorner = Instance.new("UICorner", Button)
	local ButtonConstraint = Instance.new("UIAspectRatioConstraint", Button)

	ButtonConstraint.DominantAxis = Enum.DominantAxis.Height
	Button.Name = Tab
	Button.Size = UDim2.new(0.5,0,0.5,0)

	if Ver ~= "Safe" then

		Button.Image = "rbxassetid://" ..Img

	end

	Button.BorderColor3 = Color3.fromRGB(70,70,70)
	Button.BackgroundTransparency = 0.75
	Button.LayoutOrder = LayoutOrder

	if Tab == CurrentTab then Button.BackgroundColor3 = Color3.new(1,0,0) end

	Button.MouseButton1Down:Connect(function()

		if CurrentTab == Tab then return end

		Button.BackgroundColor3 = Color3.new(1,0,0)
		TabsFrame[CurrentTab].BackgroundColor3 = Color3.fromRGB(70,70,70)

		for i,v in Tabs[CurrentTab] do

			v.Visible = nil

		end

		for i,v in Tabs[Tab] do

			v.Visible = true

		end

		CurrentTab = Tab

	end)

	return Button

end

NewTab("Home", 1, 109306454828475)

local function NewButton(Name, Parent, Text, LayoutOrder, NoCheck)

	local Button = Instance.new("TextButton", Parent)
	local CheckFrame = Instance.new("CanvasGroup", Button)
	local GreenFrame = Instance.new("Frame", CheckFrame)
	local CheckStroke = Instance.new("UIStroke", CheckFrame)
	local CheckBorder = Instance.new("UICorner", CheckFrame)
	local Label = Instance.new("TextLabel", Button)

	Button.Name = Name
	Button.Size = UDim2.new(0.9, 0,0.075, 0)
	Button.BackgroundColor3 = Color3.fromRGB(45,45,45)
	Button.BackgroundTransparency = 0
	Button.BorderSizePixel = 0
	Button.LayoutOrder = LayoutOrder
	Button.Text = ""

	if NoCheck then

		CheckFrame:Destroy()
		Label.Position = UDim2.fromScale(0,0)
		Label.Size = UDim2.fromScale(1,1)

	else

		CheckFrame.Name = "Frame"
		CheckFrame.Size = UDim2.fromScale(1,1)
		CheckFrame.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
		CheckFrame.AnchorPoint = Vector2.new(1, 0)
		CheckFrame.Position = UDim2.fromScale(1, 0)
		CheckBorder.CornerRadius = UDim.new(0.2, 0)
		CheckBorder:Clone().Parent = GreenFrame
		CheckStroke.Thickness = 3
		GreenFrame.Visible = nil
		GreenFrame.Size = UDim2.fromScale(1,1)
		GreenFrame.BackgroundColor3 = Color3.fromRGB(255, 162, 0)
		Label.Size = UDim2.fromScale(0.866,1)

	end

	Label.BackgroundTransparency = 1
	Label.TextColor3 = Color3.new(1,1,1)
	Label.TextScaled = true
	Label.Font = Enum.Font.FredokaOne
	Label.Text = Text
	Label.TextXAlignment = Enum.TextXAlignment.Left

	Instance.new("UIAspectRatioConstraint", CheckFrame)

	return Button

end

local function NewBox(Name, Parent, Text, LayoutOrder)

	local Button = Instance.new("TextBox", Parent)

	Button.Name = Name
	Button.Size = UDim2.new(0.9, 0,0.1, 0)
	Button.BackgroundColor3 = Color3.fromRGB(45,45,45)
	Button.BackgroundTransparency = 0
	Button.BorderSizePixel = 0
	Button.TextColor3 = Color3.new(1,1,1)
	Button.TextScaled = true
	Button.Font = Enum.Font.FredokaOne
	Button.Text = Text
	Button.LayoutOrder = LayoutOrder
	Button.TextXAlignment = Enum.TextXAlignment.Left
	return Button

end

FlyFrame.Name = "Fly"
FlyFrame.BackgroundColor3 = Color3.fromRGB(45,45,45)
FlyFrame.LayoutOrder = 1
FlyFrame.Visible = nil

-- Creation d "Tabs"

NewTab("Movement", 2, 10507122420)
NewTab("Aimbot", 3, 13557340523)
NewTab("Fling", 4, 0)
NewTab("Other", 9999, 0)

-- Frames

local LoadingFrame = Instance.new("CanvasGroup", NameLabel)
local LoadingBar = Instance.new("Frame", LoadingFrame)
local LoadingFrameCorner = Instance.new("UICorner", LoadingFrame)

LoadingFrameCorner.CornerRadius = UDim.new(1,0)

LoadingFrame.Name = "LoadingFrame"
LoadingFrame.AnchorPoint = Vector2.new(0.5,0.5)
LoadingFrame.Size = UDim2.new(0.75,0,0.25,0)
LoadingFrame.Position = UDim2.new(0.5,0,0.5,0)
LoadingFrame.BackgroundColor3 = Color3.new(1,1,1)
LoadingFrame.ZIndex = 10
LoadingBar.Size = UDim2.new(0,0,1,0)
LoadingBar.BackgroundColor3 = Color3.fromRGB(0,150,255)
LoadingBar.ZIndex = 20
LoadingFrameCorner:Clone().Parent = LoadingBar

FlyName = NameLabel:Clone()
FlyNameStroke = Instance.new("UIStroke", FlyName)
FlyNameStrokeGradient = Instance.new("UIGradient", FlyNameStroke)

FlyCorner.CornerRadius = UDim.new(0.1,0)
FlyOptionLayout.Padding = UDim.new(0.025)
FlyOptionLayout.SortOrder = Enum.SortOrder.LayoutOrder
FlyOptionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
FlyName.LoadingFrame:Destroy()
FlyName.Parent = FlyFrame
FlyName.Text = "Fly"
FlyName.Name = "NameLabel"
FlyName.TextXAlignment = Enum.TextXAlignment.Center
FlyNameStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
FlyNameStroke.Color = Color3.fromRGB(255, 162, 0)
FlyNameStroke.Thickness = 3
FlyNameStrokeGradient.Rotation = 90
FlyNameStrokeGradient.Transparency = NumberSequence.new{
	NumberSequenceKeypoint.new(0, 1),
	NumberSequenceKeypoint.new(0.906, 1),
	NumberSequenceKeypoint.new(1, 0)
}

local WhitelistFrame = Instance.new("ScrollingFrame")
local WhitelistCorner = Instance.new("UICorner", WhitelistFrame)
local WhitelistOptionLayout = Instance.new("UIListLayout", WhitelistFrame)

WhitelistCorner.CornerRadius = UDim.new(0.1,0)
WhitelistOptionLayout.Padding = UDim.new(0.01)
WhitelistOptionLayout.SortOrder = Enum.SortOrder.LayoutOrder
WhitelistOptionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
WhitelistFrame.Size = UDim2.new(0.1, 0,0.25, 0)
WhitelistFrame.Visible = nil
WhitelistFrame.Parent = MenuUI

FlingWhitelistFrame = WhitelistFrame:Clone()
FlingWhitelistFrame.Parent = MenuUI

local InterfaceFrame = FlyFrame:Clone()
InterfaceFrame.Name = "Interface"
InterfaceFrame.NameLabel.Text = "Interface"
InterfaceFrame.LayoutOrder = 1
InterfaceFrame.Parent = Options

local QOLFrame = FlyFrame:Clone()
QOLFrame.Name = "QOL"
QOLFrame.NameLabel.Text = "QOL"
QOLFrame.LayoutOrder = 2
QOLFrame.Parent = Options

local SpeedFrame = FlyFrame:Clone()
SpeedFrame.Name = "Speed"
SpeedFrame.NameLabel.Text = "Speed"
SpeedFrame.LayoutOrder = 2
SpeedFrame.Parent = Options

local TPFrame = FlyFrame:Clone()
TPFrame.Name = "TP"
TPFrame.NameLabel.Text = "TP"
TPFrame.LayoutOrder = 3
TPFrame.Parent = Options

local ESPFrame = FlyFrame:Clone()
ESPFrame.Name = "ESP"
ESPFrame.NameLabel.Text = "ESP"
ESPFrame.LayoutOrder = 1
ESPFrame.Parent = Options

local AdvancedESP1 = FlyFrame:Clone()
AdvancedESP1.Name = "AdvancedESP1"
AdvancedESP1.NameLabel.Text = "UI"
AdvancedESP1.LayoutOrder = 1
AdvancedESP1.Parent = Options

local AdvancedESP2 = FlyFrame:Clone()
AdvancedESP2.Name = "AdvancedESP1"
AdvancedESP2.NameLabel.Text = "Colors"
AdvancedESP2.LayoutOrder = 2
AdvancedESP2.Parent = Options

local BangFrame = FlyFrame:Clone()
BangFrame.Name = "Bang"
BangFrame.NameLabel.Text = "Les 8 Ã©tapes"
BangFrame.LayoutOrder = 2
BangFrame.Parent = Options

local ChatFrame = FlyFrame:Clone()
ChatFrame.Name = "Chat"
ChatFrame.NameLabel.Text = "Chat"
ChatFrame.LayoutOrder = 3
ChatFrame.Parent = Options

local CLockFrame = FlyFrame:Clone()
CLockFrame.Name = "CLock"
CLockFrame.NameLabel.Text = "CLock"
CLockFrame.LayoutOrder = 1
CLockFrame.Parent = Options

local AimbotFrame = FlyFrame:Clone()
AimbotFrame.Name = "Aimbot"
AimbotFrame.NameLabel.Text = "Aimbot"
AimbotFrame.LayoutOrder = 2
AimbotFrame.Parent = Options

local CLockChecksFrame = FlyFrame:Clone()
CLockChecksFrame.Name = "CLockChecks"
CLockChecksFrame.NameLabel.Text = "Checks"
CLockChecksFrame.LayoutOrder = 3
CLockChecksFrame.Parent = Options

AdvancedFovFrame = FlyFrame:Clone()
AdvancedFovFrame.Name = "AdvancedFov"
AdvancedFovFrame.NameLabel.Text = "Fov"
AdvancedFovFrame.LayoutOrder = 1
AdvancedFovFrame.Parent = Options

TriggerBotFrame = FlyFrame:Clone()
TriggerBotFrame.Name = "Triggerbot"
TriggerBotFrame.NameLabel.Text = "Triggerbot"
TriggerBotFrame.LayoutOrder = 2
TriggerBotFrame.Parent = Options

FlingFrame = FlyFrame:Clone()
FlingFrame.Name = "FlingFrame"
FlingFrame.NameLabel.Text = "Fling"
FlingFrame.LayoutOrder = 1
FlingFrame.Parent = Options

FlingChecksFrame = FlyFrame:Clone()
FlingChecksFrame.Name = "FlingChecksFrame"
FlingChecksFrame.NameLabel.Text = "FlingChecks"
FlingChecksFrame.LayoutOrder = 2
FlingChecksFrame.Parent = Options

if game.GameId == 3808081382 then --Tsbite

	VoidDB = nil
	VoidTarget = PlayerToTP
	VoidTool = FlingTool:Clone()

	VoidTool.Name = "Void tool"
	VoidTool.ToolTip = "Used to void ppl"

	TrashcanTarget = PlayerToTP
	Trashcaning = nil

	NewTab("Tsb", 9, 0)

	VoidFrame = FlyFrame:Clone()
	VoidFrame.Name = "Void"
	VoidFrame.NameLabel.Text = "Void"
	VoidFrame.LayoutOrder = 1
	VoidFrame.Parent = Options

	TrashcanFrame = FlyFrame:Clone()
	TrashcanFrame.Name = "Trascan"
	TrashcanFrame.NameLabel.Text = "Trashcan spamming"
	TrashcanFrame.LayoutOrder = 1
	TrashcanFrame.Parent = Options

	VoidButton = NewButton("Enabled", VoidFrame, "Void selected plr", 1, true)
	VoidTargetBox = NewBox("Target", VoidFrame, "Target = " ..VoidTarget.DisplayName, 2)
	VoidToolButton = NewButton("Tool", VoidFrame, "VoidToolGiver", 3, true)

	TrashcanFrame = FlyFrame:Clone()
	TrashcanFrame.Name = "Trascan"
	TrashcanFrame.NameLabel.Text = "Trashcan spamming"
	TrashcanFrame.LayoutOrder = 1
	TrashcanFrame.Parent = Options

	TrashcanButton = NewButton("Enabled", TrashcanFrame, "Spam selected plr", 1)
	TrashcanTargetBox = NewBox("Target", TrashcanFrame, "Target = " ..TrashcanTarget.DisplayName, 2)
	TrashcanToolButton = NewButton("Tool", TrashcanFrame, "TrashcanToolGiver", 3, true)

	Tabs.Tsb = {
		VoidFrame,
		TrashcanFrame
	}

	function Void() -- Void

		if not PLR.Backpack:FindFirstChild("Flowing Water") then return end
		if VoidDB then return end 

		VoidDB = true

		local Start = tick()
		local Attack = PLR.Backpack["Flowing Water"]

		local OldPos = Char.HumanoidRootPart.CFrame

		Attack.Parent = Char
		Attack:Activate()

		while tick() - Start < 1 do

			task.wait()

			Char.HumanoidRootPart.CFrame = VoidTarget.Character:GetPivot() * CFrame.new(0,0,Char.HumanoidRootPart.Size.Z)

		end

		local TWV = TW:Create(Char.HumanoidRootPart, TweenInfo.new(0.25), {["CFrame"] = CFrame.new(Char.HumanoidRootPart.Position.X, 216.95181274414062, Char.HumanoidRootPart.Position.Z)}) 

		TWV:Play()
		TWV.Completed:Wait()

		local VoidConnection = game:GetService("RunService").RenderStepped:Connect(function()

			Char.HumanoidRootPart.CFrame = CFrame.new(Char.HumanoidRootPart.Position.X, 216.95181274414062, Char.HumanoidRootPart.Position.Z)

		end)

		task.delay(5, function()

			if Attack.Parent ~= PLR.Backpack then

				VoidConnection:Disconnect()

				Attack.Parent = PLR.Backpack
				Char.HumanoidRootPart.Anchored = nil
				Char.HumanoidRootPart.CFrame = OldPos

				VoidDB = nil

				return

			end

		end)

		VoidTarget.Character.Destroying:Wait()

		VoidConnection:Disconnect()

		Attack.Parent = PLR.Backpack
		Char.HumanoidRootPart.Anchored = nil
		Char.HumanoidRootPart.CFrame = OldPos

		VoidDB = nil

	end

	VoidButton.MouseButton1Down:Connect(Void)

	game:GetService("Players").PlayerRemoving:Connect(function(plr)

		if plr == VoidTarget then

			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Goat Hub",
				Text = "The targeted player of your void (" ..VoidTarget.DisplayName.. ") has left changed target to you."
			})

			VoidTarget = game:GetService("Players"):GetPlayers()[1]
			VoidTargetBox.Text = "Player = " ..VoidTarget.DisplayName

		end

	end)

	VoidTargetBox.FocusLost:Connect(function(EP)

		if not EP then return end

		local PlayerName = VoidTargetBox.Text
		local PLayer

		for i,v in game:GetService("Players"):GetPlayers() do

			if PLayer then continue end

			if string.find(string.lower(v.DisplayName), string.lower(PlayerName)) then

				PLayer = v
				VoidTarget = v

			end

		end

		VoidTargetBox.Text = "Player = " ..VoidTarget.DisplayName

	end)

	VoidToolButton.MouseButton1Down:Connect(function()

		local Tool = VoidTool:Clone()

		Tool.Parent = PLR.Backpack

		Tool.Activated:Connect(function()

			local MP = UIS:GetMouseLocation()
			local MR = Cam:ViewportPointToRay(MP.X, MP.Y)
			local Result = workspace:Raycast(MR.Origin, MR.Direction * 100000, FlingToolParams)

			if Result then

				if not Result.Instance:GetRootPart() then return end
				if not Result.Instance:GetRootPart().Parent then return end

				local plr = game:GetService("Players"):GetPlayerFromCharacter(Result.Instance:GetRootPart().Parent)

				if not plr then return end

				VoidTarget = plr
				VoidTargetBox.Text = "Player = " ..VoidTarget.DisplayName
				Void()

			end

		end)

	end)

	--TrashCan

	print(PLR.Character.HumanoidRootPart.RootJoint.C1.Rotation)

	local function Trashcan()

		Trashcaning = not Trashcaning

		TrashcanButton.Frame.Frame.Visible = Trashcaning

		if not Trashcaning then return end

		local BaseC1 = PLR.Character.HumanoidRootPart.RootJoint.C1

		--PLR.Character.HumanoidRootPart.RootJoint.C1 += Vector3.new(0, -50 , 0)

		while Trashcaning do

			Cam.CameraSubject = TrashcanTarget.Character.Humanoid

			local Found

			task.wait()

			for i,v in workspace.Map.Trash:GetChildren() do

				if Found then continue end

				if not v:GetAttribute("Broken") then

					Found = true

					PLR.Character.HumanoidRootPart.CFrame = v.Trashcan.CFrame + Vector3.new(0, 0, 2)

					PLR.Character:FindFirstChild("Communicate"):FireServer({
						Goal = "LeftClick";
					})

					local OnChildAdded
					local IDK

					OnChildAdded = PLR.Character.ChildAdded:Connect(function(Child)

						if not Child:IsA("StringValue") then return end
						if Child.Value ~= "Trashcan" then return end

						PLR.Character:FindFirstChild("Communicate"):FireServer({
							Goal = "LeftClickRelease";
						})

						Child.Destroying:Wait()

						task.wait(0.5)

						PLR.Character.HumanoidRootPart.CFrame = CFrame.lookAt(TrashcanTarget.Character.HumanoidRootPart.Position + Vector3.new(0, 0, 10), TrashcanTarget.Character.HumanoidRootPart.Position)

						PLR.Character:FindFirstChild("Communicate"):FireServer({
							Goal = "LeftClick";
						})

						IDK = true

					end)

					while not IDK do

						task.wait()

						PLR.Character.HumanoidRootPart.CFrame = v.Trashcan.CFrame + Vector3.new(0, 0, 2)

					end

					OnChildAdded:Disconnect()

					IDK = nil

					PLR.Character.ChildAdded:Connect(function(Child)

						if not Child:IsA("StringValue") then return end
						if Child.Value ~= "Trashcan" then return end

						PLR.Character:FindFirstChild("Communicate"):FireServer({
							Goal = "LeftClickRelease";
						})

						task.wait(0.75)

						IDK = true

					end)

					task.delay(2, function()

						if not IDK then

							IDK = true

						end

					end)

					while not IDK do

						task.wait()

						PLR.Character.HumanoidRootPart.CFrame = CFrame.lookAt((TrashcanTarget.Character.HumanoidRootPart.Position + (TrashcanTarget.Character.HumanoidRootPart.AssemblyLinearVelocity * 0.5)) + Vector3.new(0, 0, 10), TrashcanTarget.Character.HumanoidRootPart.Position)

					end

				end

			end

		end

		PLR.Character.HumanoidRootPart.RootJoint.C1 = BaseC1
		Cam.CameraSubject = PLR.Character.Humanoid

	end

	TrashcanButton.MouseButton1Down:Connect(Trashcan)

	game:GetService("Players").PlayerRemoving:Connect(function(plr)

		if plr == TrashcanTarget then

			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Goat Hub",
				Text = "The targeted player of your void (" ..TrashcanTarget.DisplayName.. ") has left changed target to you."
			})

			TrashcanTarget = game:GetService("Players"):GetPlayers()[1]
			TrashcanTargetBox.Text = "Player = " ..TrashcanTarget.DisplayName

		end

	end)

	TrashcanTargetBox.FocusLost:Connect(function(EP)

		if not EP then return end

		local PlayerName = TrashcanTargetBox.Text
		local PLayer

		for i,v in game:GetService("Players"):GetPlayers() do

			if PLayer then continue end

			if string.find(string.lower(v.DisplayName), string.lower(PlayerName)) then

				PLayer = v
				TrashcanTarget = v

			end

		end

		TrashcanTargetBox.Text = "Player = " ..TrashcanTarget.DisplayName

	end)

elseif game.GameId == 7828766934 then --Anime girl thingie

	NewTab("Steal", 9, 0)

	StealTarget = 1
	InstantSteal = true
	InfStealReach = true
	StealNoClip = true
	Focused = nil

	StealFrame = FlyFrame:Clone()
	StealFrame.Name = "Steal"
	StealFrame.NameLabel.Text = "Steal"
	StealFrame.LayoutOrder = 1
	StealFrame.Parent = Options

	for i,v in workspace.PLOTS:GetChildren() do

		if not v:FindFirstChild("Owner") then continue end

		StealTarget = v.Name

	end

	local StealButton = NewButton("Enabled", StealFrame, "Steal selected plr", 1, true)
	local StealTargetBox = NewBox("Enabled", StealFrame, "Steal target : " ..workspace.PLOTS[StealTarget].Owner.Value.DisplayName, 2)
	local InstantStealButton = NewButton("Enabled", StealFrame, "Instant steal", 3)
	local InfStealReachButton = NewButton("Enabled", StealFrame, "Inf steal reach", 4)
	local StealNoClipButton = NewButton("Enabled", StealFrame, "Steal trough walls", 5)

	Tabs.Steal = {StealFrame}

	local function Steal()

		print(StealTarget)

		for i,v in workspace.PLOTS[StealTarget]:GetChildren() do

			print(v)

			if not v:IsA("Model") then continue end

			print("a")

			if not v:FindFirstChild("GrabPrompt") then continue end

			print("b")

			if InstantSteal then

				v.GrabPrompt.HoldDuration = 0

			end

			if InfStealReach then

				v.GrabPrompt.MaxActivationDistance = 99999999999

			end

			if StealNoClip then

				v.GrabPrompt.RequiresLineOfSight = nil

			end

		end

	end

	StealButton.MouseButton1Down:Connect(function()

		Steal()

	end)

	StealTargetBox.FocusLost:Connect(function()

		Focused = nil

		for i,v in workspace.PLOTS:GetChildren() do

			if not v:FindFirstChild("Owner") then continue end

			if string.find(v.Owner.Value.DisplayName, StealTargetBox.Text) then

				StealTarget = v.Name

			end

		end

	end)

	InstantStealButton.MouseButton1Down:Connect(function()

		InstantSteal = not InstantSteal
		InstantStealButton.Frame.Frame.Visible = InstantSteal

	end)

	InfStealReachButton.MouseButton1Down:Connect(function()

		InfStealReach = not InfStealReach
		InfStealReachButton.Frame.Frame.Visible = InfStealReach

	end)

	StealNoClipButton.MouseButton1Down:Connect(function()

		StealNoClip = not StealNoClip
		StealNoClipButton.Frame.Frame.Visible = StealNoClip

	end)

	InstantStealButton.Frame.Frame.Visible = InstantSteal
	InfStealReachButton.Frame.Frame.Visible = InfStealReach
	StealNoClipButton.Frame.Frame.Visible = StealNoClip

	StealTargetBox.Focused:Connect(function()

		Focused = true

	end)

	game["Run Service"].RenderStepped:Connect(function()

		if Focused then return end

		StealTargetBox.Text = "Steal target : " ..workspace.PLOTS[StealTarget].Owner.Value.DisplayName

	end)

end

-- Home

local InterfaceKeybindButton = NewButton("Kebind", InterfaceFrame, "Keybind = H", 1, true)
local InterfaceSizeButton = NewButton("Size", InterfaceFrame, "Size = Medium", 2, true)
local SizeFrame = FlyFrame:Clone()
SizeFrame.Name = "Size"
SizeFrame.NameLabel.Text = "Choose size"
SizeFrame.LayoutOrder = 1
SizeFrame.Parent = MenuUI
SizeFrame.Size = UDim2.new(0.1, 0,0.25, 0)

local SmallButton = NewButton("Small", SizeFrame, "Small", 1, true)
local MediumButton = NewButton("Medium", SizeFrame, "Medium", 2, true)
local BigButton = NewButton("Big", SizeFrame, "Big", 3, true)
local Size2Button = NewButton("Size2", SizeFrame, "Size 2 Fish", 4, true)

local BTypeFrame = FlyFrame:Clone()
BTypeFrame.Name = "BType"
BTypeFrame.NameLabel.Text = "Choose type"
BTypeFrame.LayoutOrder = 1
BTypeFrame.Parent = MenuUI
BTypeFrame.Size = UDim2.new(0.1, 0,0.25, 0)

local Back = NewButton("Back", BTypeFrame, "Back", 1, true)
local Front = NewButton("Front", BTypeFrame, "Front", 2, true)
local Mouth = NewButton("Mouth", BTypeFrame, "Mouth", 3, true)

local KOCheckButton = NewButton("KO", CLockChecksFrame, "KO", 2)
local WallCheckButton = NewButton("Wall", CLockChecksFrame, "Wall", 3)
local TeamCheckButton = NewButton("Team", CLockChecksFrame, "Team", 4)

local KeybindsToggleButton = NewButton("KeybindsToggle", QOLFrame, "Keybinds", 1)
local WhitelistButton = NewButton("Whitelist", QOLFrame, "Whitelist", 2, true)
local MouseBehaviorButton = NewButton("Mouse", QOLFrame, "Mouse behavior = Free mouse", 3, true)
local MouseVisibleButton = NewButton("Mouse", QOLFrame, "Mouse visible", 4)
local CustomCursorButton = NewButton("Cursor", QOLFrame, "Custom cursor", 5)
local ForceResetButton = NewButton("Reset", nil, "Force reset", 6, true)

WhitelistButton.Visible = nil

Tabs.Home = {
	InterfaceFrame,
	QOLFrame
}

-- Premier "Tab"

FlyEnabledButton = NewButton("Enabled", FlyFrame, "Fly", 1)
local FlyKeybindButton = NewButton("Keybind", FlyFrame, "Keybind = F", 2, true)
local FlySpeedBox = NewBox("Speed", FlyFrame, "Speed = 0", 3)
local NoclipEnabledButton = NewButton("NoclipEnabled", FlyFrame, "Noclip", 4)
local InfJumpEnabledButton = NewButton("Enabled", FlyFrame, "Inf jump", 6)
local InfJumpKeybindButton = NewButton("Keybind", FlyFrame, "Keybind = M", 7, true)

local SpeedEnabledButton = NewButton("Enabled", SpeedFrame, "Enabled", 1)
local SpeedKeybindButton = NewButton("Keybind", SpeedFrame, "Keybind = G", 2, true)
local SpeedSpeedBox = NewBox("Speed", SpeedFrame, "Speed = 0", 3)

local CTPEnabledButton = NewButton("Enabled", TPFrame, "Click to tp", 2)
local CTPKeybindButton = NewButton("Keybind", TPFrame, "Keybind = P", 3, true)

local PTPEnabledButton = NewButton("Enabled", TPFrame, "Teleport to selected plr", 5, true)
local PTPKeybindButton = NewButton("Keybind", TPFrame, "Keybind = L", 6, true)
local PTPPlayerBox = NewBox("Player", TPFrame, "Player = " ..PlayerToTP.DisplayName, 7)

Tabs.Movement = {
	FlyFrame,
	SpeedFrame,
	TPFrame
}

-- Aimbot

local CLockEnabledButton = NewButton("Enabled", CLockFrame, "CLock", 1)
local CLockKeybindButton = NewButton("Keybind", CLockFrame, "Keybind = none", 2, true)
local CLockFovEnableButton = NewButton("Fov", CLockChecksFrame, "Fov", 4)
AdvancedFovButton = NewButton("AdvancedOptions", CLockChecksFrame, "Advanced options", 5, true)

CLockFovSizeBox = NewBox("Checks", AdvancedFovFrame, "Fov size = 100", 1)
CLockFovVisibleButton = NewButton("FovVisible", AdvancedFovFrame, "Fov visible", 2)
FovRainbowButton = NewButton("Rainbow", AdvancedFovFrame, "LGBTQ+", 3)

FovFrame = Instance.new("Frame", AlwaysEnabled)
FovFrameCorner = Instance.new("UICorner", FovFrame)
FovFrameBorder = Instance.new("UIStroke", FovFrame)

FovFrame.BackgroundTransparency = 1
FovFrameCorner.CornerRadius = UDim.new(1,0)
FovFrame.Visible = nil

CLockFovVisibleButton.Visible = nil
CLockFovSizeBox.Visible = nil

AdvancedFovFix = Instance.new("Frame", TabsFrame)
AdvancedFovFix.Transparency = 1
AdvancedFovFix.Name = "AdvancedFov"

TriggerbotButton = NewButton("Enabled", TriggerBotFrame, "Triggerbot", 1)
TriggerbotKeybindButton = NewButton("Keybind", TriggerBotFrame, "Keybind = V", 2, true)
TriggerbotModeButton = NewButton("Mode", TriggerBotFrame, "Mode = " ..TriggerbotMode, 3, true)

AimbotEnabledButton = NewButton("Enabled", AimbotFrame, "Aimbot", 3)
AimbotKeybindButton = NewButton("Keybind", AimbotFrame, "Keybind = C", 4, true)
AimbotSmoothnessBox = NewBox("Smoothness", AimbotFrame, "Smoothness = 0", 5, true)

Tabs.Aimbot = {
	CLockFrame,
	AimbotFrame,
	CLockChecksFrame
}

Tabs.AdvancedFov = {
	AdvancedFovFrame,
	TriggerBotFrame
}

-- Fling

FlingButton = NewButton("Fling", FlingFrame, "Fling selected plr", 1, true)
FlingBox = NewBox("Checks", FlingFrame, "Target = " ..FlingTarget.DisplayName, 2)
FlingKeybindButton = NewButton("Keybind", FlingFrame, "Keybind = none", 3, true)
FlingAllButton = NewButton("Fling", FlingFrame, "Fling all", 4, true)
FlingWhitelistButton = NewButton("Whitelist", FlingFrame, "Fling all whitelist", 5, true)
FlingLoopButton = NewButton("Loop", FlingFrame, "Loop fling", 6)
FlingToolButton = NewButton("Tool", FlingFrame, "Give fling tool", 7, true)

SitCheckButton = NewButton("Check", FlingChecksFrame, "Sit", 1)
FriendCheckButton = NewButton("Check", FlingChecksFrame, "Friend", 2)
FlingTeamCheckButton = NewButton("Check", FlingChecksFrame, "Team", 3)

Tabs.Fling = {
	FlingFrame,
	FlingChecksFrame
}

SitCheckButton.Frame.Frame.Visible = true

-- Other

local ESPEnabledButton = NewButton("Enabled", ESPFrame, "ESP", 1)
local ESPKeybindButton = NewButton("Keybind", ESPFrame, "Keybind = N", 2, true)
local ESPNameEnabledButton = NewButton("NameEnabled", ESPFrame, "Names", 3)
local ESPColorEnabledButton = NewButton("ColorEnabled", ESPFrame, "Color Targeted aimbot player", 4)
local ESPColorBox = NewBox("Color", ESPFrame, "Color = 255,255,0", 5)
local ESPAdvancedButton = NewButton("Advanced", ESPFrame, "Advanced options", 6, true)
local ESPOutlineTypeButton = NewButton("Boxes", AdvancedESP1, "Outline type = none", 1, true)
local ESPLinesButton = NewButton("Lines", AdvancedESP1, "Lines", 2)
local NotTargetedESPColorBox = NewBox("Color", AdvancedESP2, "Color = 255,255,255", 1)
local ESPTeamColorButton = NewButton("TeamColor", AdvancedESP2, "Adjust colors for teams", 2)
local ESPRainbowButton = NewButton("Rainbow", AdvancedESP2, "LGBTQ+", 6)

ESPColorBox.Visible = nil
Tabs["AdvancedESP"] = {AdvancedESP1, AdvancedESP2}

local BangEnabledButton = NewButton("Enabled", BangFrame, "Bang", 1)
local BangKeybindButton = NewButton("Keybind", BangFrame, "Keybind = B", 2, true)
local BTypeButton = NewButton("Type", BangFrame, "Type = Back", 3, true)
local BangPlayerBox = NewBox("Player", BangFrame, "Player = " ..PlayerToBang.DisplayName, 4)

local RTEnabledButton = NewButton("Enabled", ChatFrame, "Rizz Talk", 1, true)
local RTKeybindButton = NewButton("Keybind", ChatFrame, "Keybind = K", 2, true)
local TTEnabledButton = NewButton("Enabled", ChatFrame, "Trash Talk", 3, true)
local TTKeybindButton = NewButton("Keybind", ChatFrame, "Keybind = J", 4, true)
ChatArtButton = NewButton("Art", ChatFrame, "Chat Art", 5, true)
DeleteToolButton = NewButton("Tool", ChatFrame, "Give delete tool", 5, true)

Tabs.Other = {
	ESPFrame,
	BangFrame,
	ChatFrame
}

TabsFrame.Visible = nil
MenuFrame.BackgroundTransparency = 1

if Ver == "Safe" then

	table.remove(Tabs.Movement, table.find(Tabs.Movement, SpeedFrame))

end

for i,v in MenuUI:GetDescendants() do

	if v:IsA("TextButton") and v:FindFirstChild("TextLabel") then

		v.MouseEnter:Connect(function()

			HoverSound:Play()
			v.TextLabel.TextColor3 = Color3.fromRGB(255, 0, 0)

		end)

		v.MouseLeave:Connect(function()

			v.TextLabel.TextColor3 = Color3.new(1,1,1)

		end)

		v.MouseButton1Down:Connect(function()

			ClickSound:Play()

		end)

	elseif v:IsA("ImageButton") then

		v.MouseEnter:Connect(function()

			HoverSound:Play()
			v.ImageColor3 = Color3.fromRGB(255, 0, 0)

		end)

		v.MouseLeave:Connect(function()

			v.ImageColor3 = Color3.new(1,1,1)

		end)

		v.MouseButton1Down:Connect(function()

			ClickSound:Play()

		end)

	end

	if v.Name == "Keybind" then

		local Name = v.Parent.Name
		local Button = NewButton(Name, WhitelistFrame, Name, i)
		local Connection

		Button.Size = UDim2.new(0.9, 0, 0.025, 0)

		Button.MouseButton1Down:Connect(function()

			if table.find(KeybindsWhitelist, string.sub(v.TextLabel.Text, #v.TextLabel.Text, #v.TextLabel.Text)) then

				table.remove(KeybindsWhitelist, table.find(KeybindsWhitelist, string.sub(v.TextLabel.Text, #v.TextLabel.Text, #v.TextLabel.Text)))
				v.Visible = nil

				pcall(function()

					Connection:Disconnect()

				end)

			else

				local OldKey = string.sub(v.TextLabel.Text, #v.TextLabel.Text, #v.TextLabel.Text)

				table.insert(KeybindsWhitelist, string.sub(v.TextLabel.Text, #v.TextLabel.Text, #v.TextLabel.Text))
				v.Visible = true

				Connection = v:GetPropertyChangedSignal("Text"):Connect(function()

					if string.sub(v.Text, #v.Text, #v.Text) == "." then return end

					table.remove(KeybindsWhitelist, table.find(KeybindsWhitelist, OldKey))
					table.insert(KeybindsWhitelist, string.sub(v.TextLabel.Text, #v.TextLabel.Text, #v.TextLabel.Text))

				end)

			end

			Button.Frame.Frame.Visible = v.Visible

		end)

	end

end


ExitButton.MouseButton1Down:Connect(function()

	MenuUI.Enabled = not MenuUI.Enabled
	UIS.MouseBehavior = MouseBehavior
	UIS.MouseIconEnabled = MouseVisible

end)

local TotalToLoad = 0
local Loaded = 0

for i,v in Tabs do

	TotalToLoad += 1

end

-- Home

-- Interface

-- Size

InterfaceSizeButton.MouseButton1Down:Connect(function(PosX, PosY)

	SizeFrame.Position = UDim2.new(0,PosX,0,PosY)
	SizeFrame.Visible = true

end)

SmallButton.MouseButton1Down:Connect(function()

	SizeFrame.Visible = nil
	InterfaceSizeButton.TextLabel.Text = "Size = Small"
	MenuFrame.Size = UDim2.new(0.25,0,0.25,0)

end)

MediumButton.MouseButton1Down:Connect(function()

	SizeFrame.Visible = nil
	InterfaceSizeButton.TextLabel.Text = "Size = Medium"
	MenuFrame.Size = UDim2.new(0.5,0,0.5,0)

end)

BigButton.MouseButton1Down:Connect(function()

	SizeFrame.Visible = nil
	InterfaceSizeButton.TextLabel.Text = "Size = Big"
	MenuFrame.Size = UDim2.new(0.75,0,0.75,0)

end)

Size2Button.MouseButton1Down:Connect(function()

	SizeFrame.Visible = nil
	InterfaceSizeButton.TextLabel.Text = "Size = Size 2 fish"
	MenuFrame.Size = UDim2.new(1,0,1,0)

	local ImgLabel = Instance.new("ImageLabel")
	local TW = game.TweenService:Create(ImgLabel, TweenInfo.new(2.5, Enum.EasingStyle.Linear), {ImageTransparency = 1})

	ImgLabel.Size = UDim2.new(1,0,1,0)
	ImgLabel.Image = "http://www.roblox.com/asset/?id=84861241476453"
	ImgLabel.BackgroundTransparency = 1
	ImgLabel.Parent = MenuUI
	VineBoom:Play()

	TW:Play()
	TW.Completed:Wait()

	ImgLabel:Destroy()

end)

InterfaceKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	InterfaceKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			Key = Inp.KeyCode
			InterfaceKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until InterfaceKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

--QOL

--Keybinds

KeybindsToggleButton.Frame.Frame.Visible = true

local function KeyBindsToggle()

	if KDB then return end

	KDB = true
	KeybindsActive = not KeybindsActive
	KeybindsToggleButton.Frame.Frame.Visible = KeybindsActive

	if KeybindsActive then

		WhitelistButton.Visible = nil

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Goat Hub",
			Text = "Enableing keybinds this might take time..."
		})

		for i,v in MenuUI:GetDescendants() do

			task.wait()

			if v.Name == "Keybind" then

				v.Visible = true

			end

		end

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Goat Hub",
			Text = "Successfully enabled keybinds"
		})

	else

		WhitelistButton.Visible = true

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Goat Hub",
			Text = "Disableing keybinds this might take time..."
		})

		for i,v in MenuUI:GetDescendants() do

			task.wait()

			if v.Name == "Keybind" then

				v.Visible = nil

			end

		end

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Goat Hub",
			Text = "Successfully disabled keybinds"
		})

	end

	KDB = nil

end

KeybindsToggleButton.MouseButton1Down:Connect(KeyBindsToggle)

WhitelistButton.MouseButton1Down:Connect(function(PosX, PosY)

	WhitelistFrame.Position = UDim2.new(0,PosX,0,PosY)
	WhitelistFrame.Visible = not WhitelistFrame.Visible

end)

-- Mouse

task.spawn(function()

	local MouseBehaviors = {
		Enum.MouseBehavior.LockCenter,
		Enum.MouseBehavior.LockCurrentPosition,
		Enum.MouseBehavior.Default
	}

	while task.wait() do

		for i,v in MouseBehaviors do

			if v == MouseBehavior then continue end

			MouseBehaviorButton.MouseButton1Down:Wait()

			MouseBehavior = v
			MouseBehaviorButton.TextLabel.Text = "Mouse behavior = " ..string.split(tostring(v), ".")[3]

		end

	end

end)

MouseVisibleButton.Frame.Frame.Visible = MouseVisible

MouseVisibleButton.MouseButton1Down:Connect(function()

	MouseVisible = not MouseVisible
	MouseVisibleButton.Frame.Frame.Visible = MouseVisible

end)

CustomCursorButton.MouseButton1Down:Connect(function()

	CustomCursor = not CustomCursor
	CustomCursorButton.Frame.Frame.Visible = CustomCursor

end)

ForceResetButton.MouseButton1Down:Connect(function()

	PLR:LoadCharacter()

end)

Loaded += 1

local TWL = TW:Create(LoadingBar, TweenInfo.new(0.25), {Size = UDim2.new(Loaded / TotalToLoad,0,1,0)})

TWL:Play()
TWL.Completed:Wait()
-- Mtn la chaise gaming OP

--Fly

local function FlyActivate()

	FlyEnabled = not FlyEnabled
	FlyEnabledButton.Frame.Frame.Visible = FlyEnabled

	if FlyEnabled then

		local FlyCFrame = Char.HumanoidRootPart.CFrame

		while FlyEnabled do

			task.wait()

			if not Char then continue end
			if not Char:FindFirstChild("HumanoidRootPart") then continue end

			local Inps = {}
			local KKInps = UIS:GetKeysPressed()

			for i,v in KKInps do

				table.insert(Inps, v.KeyCode)

			end

			if table.find(Inps, Enum.KeyCode.W) then

				FlyCFrame += Cam.CFrame.LookVector * (FlySpeed / 10)

			elseif table.find(Inps, Enum.KeyCode.S) then

				FlyCFrame += Cam.CFrame.LookVector * (-FlySpeed / 10)

			elseif table.find(Inps, Enum.KeyCode.D) then

				FlyCFrame += Cam.CFrame.RightVector * (FlySpeed / 10)

			elseif table.find(Inps, Enum.KeyCode.A) then

				FlyCFrame += Cam.CFrame.RightVector * (-FlySpeed / 10)

			else

				Char.HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero

			end

			Char.HumanoidRootPart.CFrame = FlyCFrame

		end

		Char.HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
		Char.HumanoidRootPart.Massless = nil

	else

		for i,v in OldCollides do

			v.CanCollide = true

		end

		table.clear(OldCollides)

	end
end

FlyEnabledButton.MouseButton1Down:Connect(FlyActivate)

FlyKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	FlyKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			FlyKey = Inp.KeyCode
			FlyKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until FlyKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

FlySpeedBox.FocusLost:Connect(function(EP)

	if not EP or not tonumber(FlySpeedBox.Text) then FlySpeedBox.Text = "Speed = " ..FlySpeed return end

	FlySpeed = tonumber(FlySpeedBox.Text)
	FlySpeedBox.Text = "Speed = " ..FlySpeed

end)

NoclipEnabledButton.MouseButton1Down:Connect(function()

	NoclipEnabled = not NoclipEnabled
	NoclipEnabledButton.Frame.Frame.Visible = NoclipEnabled

end)

--Math.Huge jump

local function InfJumpEnable()

	InfJumpEnabled = not InfJumpEnabled
	InfJumpEnabledButton.Frame.Frame.Visible = InfJumpEnabled

	if InfJumpEnabled then

		local JumpLoop = UIS.JumpRequest:Connect(function()

			Char.Humanoid:ChangeState("Jumping")

		end)

		while InfJumpEnabled do

			task.wait()

		end

		JumpLoop:Disconnect()

	end

end

InfJumpEnabledButton.MouseButton1Down:Connect(InfJumpEnable)

InfJumpKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	InfJumpKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			InfJumpKey = Inp.KeyCode
			InfJumpKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until InfJumpKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

--Speed

local function SpeedActivate()

	SpeedEnabled = not SpeedEnabled
	SpeedEnabledButton.Frame.Frame.Visible = SpeedEnabled

	if SpeedEnabled then

		while SpeedEnabled do

			task.wait()

			if not Char:FindFirstChild("Humanoid") then continue end

			Char.Humanoid.WalkSpeed = SpeedSpeed

		end

	else

		Char.Humanoid.WalkSpeed = 16

	end
end

SpeedEnabledButton.MouseButton1Down:Connect(SpeedActivate)

SpeedKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	SpeedKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			SpeedKey = Inp.KeyCode
			SpeedKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until SpeedKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

SpeedSpeedBox.FocusLost:Connect(function(EP)

	if not EP or not tonumber(SpeedSpeedBox.Text) then SpeedSpeedBox.Text = "Speed = " ..SpeedSpeed return end

	SpeedSpeed = tonumber(SpeedSpeedBox.Text)
	SpeedSpeedBox.Text = "Speed = " ..SpeedSpeed

end)

--TP

--Click to tp

local function CTPEnable()

	CTPEnabled = not CTPEnabled
	CTPEnabledButton.Frame.Frame.Visible = CTPEnabled

	if CTPEnabled then

		local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

			if GPE then return end

			if Inp.UserInputType == Enum.UserInputType.MouseButton1 then

				local MP = UIS:GetMouseLocation()
				local MR = Cam:ViewportPointToRay(MP.X, MP.Y)
				local Result = workspace:Raycast(Cam.CFrame.Position, MR.Direction * 999999, CTPParams)

				PLR.Character:PivotTo(CFrame.new(Result.Position))

			end

		end)

		repeat wait() until not CTPEnabled

		Connection:Disconnect()

	end

end

CTPEnabledButton.MouseButton1Down:Connect(CTPEnable)

CTPKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	CTPKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			CTPKey = Inp.KeyCode
			CTPKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until CTPKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

-- TP to player

local function PTPEnable()

	Char:PivotTo(PlayerToTP.Character:GetPivot())

end

game:GetService("Players").PlayerRemoving:Connect(function(plr)

	if plr == PlayerToTP then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Goat Hub",
			Text = "The targeted player of your tp (" ..PlayerToTP.DisplayName.. ") has left changed target to you."
		})

		PlayerToTP = game:GetService("Players"):GetPlayers()[1]
		PTPPlayerBox.TextLabel.Text = "Player = " ..PlayerToTP.DisplayName

	end

end)

PTPEnabledButton.MouseButton1Down:Connect(PTPEnable)

PTPKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	PTPKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			PTPKey = Inp.KeyCode
			PTPKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until PTPKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

PTPPlayerBox.FocusLost:Connect(function(EP)

	if not EP then return end

	local PlayerName = PTPPlayerBox.Text
	local PLayer

	for i,v in game:GetService("Players"):GetPlayers() do

		if PLayer then continue end

		if string.find(string.lower(v.DisplayName), string.lower(PlayerName)) then

			PLayer = v
			PlayerToTP = v

		end

	end

	PTPPlayerBox.Text = "Player = " ..PlayerToTP.DisplayName

end)

Loaded += 1

TWL:Cancel()
TWL = TW:Create(LoadingBar, TweenInfo.new(0.25), {Size = UDim2.new(Loaded / TotalToLoad,0,1,0)})
TWL:Play()
TWL.Completed:Wait()

--Aimbot

--CLock

local function FindPlr()

	local Target
	local TDist = 1000000

	for i,v in game:GetService("Players"):GetPlayers() do

		if v == PLR then continue end
		if not v.Character then continue end
		if not v.Character:FindFirstChild("Humanoid") then continue end
		if not v.Character:FindFirstChild("HumanoidRootPart") then continue end
		--if (v.Character:GetPivot().Position - Char:GetPivot().Position).Magnitude > MaxDist then continue end

		if KOCheck then

			if v.Character.Humanoid.Health <= 0 then continue end

		end

		if TeamCheck then

			if PLR.Team then

				if v.Team == PLR.Team then continue end

			end 

		end

		local MP = game.UserInputService:GetMouseLocation()
		local Pos, IsOnScreen = Cam.WorldToScreenPoint(Cam, v.Character.HumanoidRootPart.Position)
		local Position = Vector2.new(Pos.X, Pos.Y) 

		if not IsOnScreen then continue end
		if (Position - MP).Magnitude >= TDist then continue end

		if CLockFovEnabled then

			if (Position - MP).Magnitude >= FovSize then continue end

		end

		if WallCheck then

			local Origin = Char.HumanoidRootPart.Position
			local Direction = (v.Character.HumanoidRootPart.Position - Origin) * 9999999999
			local Params = RaycastParams.new()

			Params.FilterDescendantsInstances = {Char}
			Params.FilterType = Enum.RaycastFilterType.Exclude

			local Result = workspace:Raycast(Origin, Direction, Params)

			if not Result then continue end
			--if not Result.Instance:GetRootPart() then continue end
			if Result.Instance.Parent ~= v.Character and Result.Instance.Parent.Parent ~= v.Character then continue end

		end

		Target = v
		TDist = (Position - MP).Magnitude

	end

	return Target

end

local function CLockEnable()

	CLockEnabled = not CLockEnabled
	CLockEnabledButton.Frame.Frame.Visible = CLockEnabled

	if CLockEnabled then

		AimbotEnabled = nil

		local Target = FindPlr()

		if not Target then CLockEnabled = nil return end

		UIS.MouseBehavior = Enum.MouseBehavior.LockCenter

		while CLockEnabled do

			task.wait()

			if not Target.Character then continue end
			if not Target.Character:FindFirstChild("Humanoid") then continue end

			if KOCheck then

				if Target.Character.Humanoid.Health <= 0 then CLockEnabled = nil continue end

			end

			Cam.CameraType = Enum.CameraType.Custom
			Cam.CameraSubject = Target.Character.Humanoid

		end

		UIS.MouseBehavior = Enum.MouseBehavior.Default
		Cam.CameraSubject = Char.Humanoid

	else

		UIS.MouseBehavior = Enum.MouseBehavior.Default

	end

end

CLockEnabledButton.MouseButton1Down:Connect(CLockEnable)

CLockKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	CLockKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			CLockKey = Inp.KeyCode
			CLockKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until CLockKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

AdvancedFovButton.Visible = CLockFovEnabled

CLockFovEnableButton.MouseButton1Down:Connect(function()

	CLockFovEnabled = not CLockFovEnabled
	CLockFovEnableButton.Frame.Frame.Visible = CLockFovEnabled
	CLockFovVisibleButton.Visible = CLockFovEnabled
	CLockFovSizeBox.Visible = CLockFovEnabled
	AdvancedFovButton.Visible = CLockFovEnabled

end)

CLockFovVisibleButton.MouseButton1Down:Connect(function()

	FovVisible = not FovVisible
	CLockFovVisibleButton.Frame.Frame.Visible = FovVisible

end)

CLockFovSizeBox.FocusLost:Connect(function(EP)

	if not EP then return end
	if not tonumber(CLockFovSizeBox.Text) then return end

	FovSize = tonumber(CLockFovSizeBox.Text)
	CLockFovSizeBox.Text = "Fov size = " ..FovSize

end)

AdvancedFovButton.MouseButton1Down:Connect(function()

	if CurrentTab == "AdvancedFov" then return end

	TabsFrame[CurrentTab].BackgroundColor3 = Color3.fromRGB(70,70,70)

	for i,v in Tabs[CurrentTab] do

		v.Visible = nil

	end

	for i,v in Tabs["AdvancedFov"] do

		v.Visible = true

	end

	CurrentTab = "AdvancedFov"

end)

FovRainbowButton.MouseButton1Down:Connect(function()

	FovRainbowEnabled = not FovRainbowEnabled
	FovRainbowButton.Frame.Frame.Visible = FovRainbowEnabled

	if FovRainbowEnabled then

		local RainbowVal = Instance.new("Color3Value")
		local ColorTbl = {
			BrickColor.Red().Color,
			BrickColor.Yellow().Color,
			BrickColor.Blue().Color,
			Color3.new(1,0,1),
			Color3.new(0.5,0,1)
		}

		task.spawn(function()

			while FovRainbowEnabled do

				task.wait()

				FovFrameBorder.Color = RainbowVal.Value

			end

		end)

		while FovRainbowEnabled do

			task.wait()

			for i,v in ColorTbl do

				local TWER = TW:Create(RainbowVal, TweenInfo.new(1, Enum.EasingStyle.Linear), {Value = v})

				TWER:Play()
				TWER.Completed:Wait()

			end

		end

	else

		FovFrameBorder.Color = Color3.new(0, 0, 0)

	end

end)

-- Aimbot

if not Char:FindFirstChild("Head") then

	Extra = (Cam.CFrame.Position - PLR.Character.HumanoidRootPart.Position).Magnitude

else

	Extra = (Cam.CFrame.Position - PLR.Character.Head.Position).Magnitude

end

local function CenterCamOnTarget(Target)

	if not Target or not Target.Character then return end
	if not Target.Character:FindFirstChild("Humanoid") then return end
	if not Char or not Char:FindFirstChild("Head") then return end

	local Humanoid = Target.Character:FindFirstChild("Humanoid")
	if KOCheck and (not Humanoid or Humanoid.Health <= 0) then return end

	local TPart = Target.Character:FindFirstChild("Head") or Target.Character:FindFirstChild("HumanoidRootPart")
	if not TPart then return end

	local Extra = Extra or 0

	local fromPos = Char:FindFirstChild("Head") and Char.Head.Position or Char.HumanoidRootPart.Position
	local goalCFrame = CFrame.lookAt(fromPos, TPart.Position)

	if AimbotSmoothness and AimbotSmoothness > 0 then
		
		local tween = TW:Create(
			Cam,
			TweenInfo.new(AimbotSmoothness, Enum.EasingStyle.Linear, Enum.EasingDirection.Out),
			{CFrame = goalCFrame}
		)
		tween:Play()
		tween.Completed:Wait()
		
	else
		
		Cam.CFrame = goalCFrame
		
	end

	repeat
		task.wait()
		UIS.MouseBehavior = Enum.MouseBehavior.LockCenter
	until math.abs(UIS:GetMouseLocation().X - Cam.ViewportSize.X/2) < 1
		and math.abs(UIS:GetMouseLocation().Y - Cam.ViewportSize.Y/2) < 1

	UIS.MouseBehavior = Enum.MouseBehavior.Default

end

local function AimbotEnable()

	AimbotEnabled = not AimbotEnabled
	AimbotEnabledButton.Frame.Frame.Visible = AimbotEnabled

	if AimbotEnabled then

		CLockEnabled = nil

		local Target = FindPlr()

		if not Target then AimbotEnabled = nil return end

		UIS.MouseBehavior = Enum.MouseBehavior.LockCenter

		UIS.InputChanged:Connect(function(Inp, GPE)

			if GPE then return end

			if Inp.UserInputType == Enum.UserInputType.MouseWheel then

				Extra += Inp.Position.Z

			end

		end)

		game["Run Service"]:BindToRenderStep("AutoAimStep", Enum.RenderPriority.Camera.Value + 101, function(dt)

			if not Target then AimbotEnabled = nil return end

			print(Target)

			CenterCamOnTarget(Target)

		end)

		local Connection = game["Run Service"].PostSimulation:Connect(function()

			if not Target then AimbotEnabled = nil return end

			print(Target)

			CenterCamOnTarget(Target)
			
		end)

		repeat wait() until not AimbotEnabled

		game["Run Service"]:UnbindFromRenderStep("AutoAimStep")
		Connection:Disconnect()
		UIS.MouseBehavior = Enum.MouseBehavior.Default
		Cam.CameraType = Enum.CameraType.Custom
		Cam.CameraSubject = Char.Humanoid

	else

		UIS.MouseBehavior = Enum.MouseBehavior.Default

	end

end

AimbotEnabledButton.MouseButton1Down:Connect(AimbotEnable)

AimbotKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	AimbotKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			AimbotKey = Inp.KeyCode
			AimbotKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until AimbotKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

AimbotSmoothnessBox.FocusLost:Connect(function(EP)

	if not EP then return end
	if not tonumber(AimbotSmoothnessBox.Text) then AimbotSmoothnessBox.Text = "Smoothness = " ..AimbotSmoothness return end

	AimbotSmoothness = tonumber(AimbotSmoothnessBox.Text)
	AimbotSmoothnessBox.Text = "Smoothness = " ..AimbotSmoothness

end)

function TriggerbotEnable()

	TriggerbotEnabled = not TriggerbotEnabled
	TriggerbotButton.Frame.Frame.Visible = TriggerbotEnabled
	AimbotEnabledButton.Visible = TriggerbotEnabled

	if TriggerbotEnabled then

		AimbotEnabled = true
		AimbotEnable()

		local M1 = nil

		UIS.InputBegan:Connect(function(Inp, GPE)

			if GPE then return end

			if Inp.UserInputType == Enum.UserInputType.MouseButton1 then

				M1 = true

			end

		end)

		UIS.InputEnded:Connect(function(Inp, GPE)

			if Inp.UserInputType == Enum.UserInputType.MouseButton1 then

				M1 = nil

			end

		end)

		while TriggerbotEnabled do

			task.wait()

			local Target = FindPlr()


			if Target and TriggerbotMode == "OnM1" and M1 then

				CenterCamOnTarget(Target)

			end

			if not CLockFovEnabled then continue end
			if TriggerbotMode ~= "Auto" then continue end

			if Target and not AimbotEnabled then

				CenterCamOnTarget(Target)

			end

		end

		M1 = nil

	end

end

TriggerbotButton.MouseButton1Down:Connect(TriggerbotEnable)

TriggerbotModeButton.MouseButton1Down:Connect(function()

	local Num = table.find(TriggerbotModes, TriggerbotMode) + 1

	if Num > #TriggerbotModes then Num = 1 end

	TriggerbotMode = TriggerbotModes[Num]
	TriggerbotModeButton.Text = "Mode = " ..TriggerbotMode

end)

TriggerbotKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	TriggerbotKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			TriggerbotKeybind = Inp.KeyCode
			TriggerbotKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until TriggerbotKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

-- Checks

KOCheckButton.MouseButton1Down:Connect(function()

	KOCheck = not KOCheck
	KOCheckButton.Frame.Frame.Visible = KOCheck

end)

WallCheckButton.MouseButton1Down:Connect(function()

	WallCheck = not WallCheck
	WallCheckButton.Frame.Frame.Visible = WallCheck

end)

TeamCheckButton.MouseButton1Down:Connect(function()

	TeamCheck = not TeamCheck
	TeamCheckButton.Frame.Frame.Visible = TeamCheck

end)

Loaded += 1

TWL:Cancel()
TWL = TW:Create(LoadingBar, TweenInfo.new(0.25), {Size = UDim2.new(Loaded / TotalToLoad,0,1,0)})
TWL:Play()
TWL.Completed:Wait()

-- Fling

function Fling()

	if not FlingTarget then return end
	if FlingTarget == PLR then return end
	if not Char then return end
	if not FlingTarget.Character then return end
	if not FlingTarget.Character:FindFirstChild("HumanoidRootPart") then return end
	if not FlingTarget.Character:FindFirstChild("Humanoid") then return end
	if FlingEnabled then return end
	if not Char.PrimaryPart then return end

	if FlingSitCheck then

		if FlingTarget.Character.Humanoid.Sit then return end

	end

	if FlingFriendCheck then

		if PLR.IsFriendsWith(PLR, FlingTarget.UserId) then return end

	end

	if FlingTeamCheck then

		if PLR.Team == FlingTarget.Team then return end

	end

	FlingEnabled = true

	if FlingEnabled then

		local TCharacter = FlingTarget.Character
		local THumanoid
		local TRootPart
		local THead
		local Accessory
		local RootPart = Char.HumanoidRootPart
		local OldPos = RootPart.CFrame

		if TCharacter:FindFirstChildOfClass("Humanoid") then
			THumanoid = TCharacter:FindFirstChildOfClass("Humanoid")
		end
		if THumanoid and THumanoid.RootPart then
			TRootPart = THumanoid.RootPart
		end
		if TCharacter:FindFirstChild("Head") then
			THead = TCharacter.Head
		end
		if TCharacter:FindFirstChildOfClass("Accessory") then
			Accessory = TCharacter:FindFirstChildOfClass("Accessory")
		end

		local FPos = function(BasePart, Pos, Ang)
			RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
			Char:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
			RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
			RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
		end

		local SFBasePart = function(BasePart)

			local TimeToWait = 2
			local Time = tick()
			local Angle = 0

			repeat
				if RootPart and THumanoid and Char.PrimaryPart then
					if BasePart.Velocity.Magnitude < 50 then
						Angle = Angle + 100

						FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
						task.wait()

						FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
						task.wait()
					else
						FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
						task.wait()

						FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
						task.wait()
					end
				else
					break
				end
			until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= FlingTarget.Character or FlingTarget.Parent ~= game.Players or THumanoid.Sit or Char.Humanoid.Health <= 0 or tick() > Time + TimeToWait
		end

		local BVel = Instance.new("BodyVelocity", Char.HumanoidRootPart)

		BVel.Velocity = Vector3.new(9e8, 9e8, 9e8)
		BVel.MaxForce = Vector3.new(1/0, 1/0, 1/0)

		Char.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)

		SFBasePart(FlingTarget.Character.HumanoidRootPart)

		BVel:Destroy()

		repeat

			pcall(function()

				RootPart.CFrame = OldPos * CFrame.new(0, .5, 0)
				Char:SetPrimaryPartCFrame(OldPos * CFrame.new(0, .5, 0))
				Char.Humanoid:ChangeState("GettingUp")
				table.foreach(Char:GetChildren(), function(_, x)
					if x:IsA("BasePart") then
						x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
					end
				end)
				task.wait()

			end)

		until (RootPart.Position - OldPos.p).Magnitude < 25 or not Char.PrimaryPart

		FlingEnabled = nil

	end

end

FlingButton.MouseButton1Down:Connect(function()

	Fling()

	while FlingLoop do

		task.wait()

		Fling()

	end

end)

FlingAllButton.MouseButton1Down:Connect(function()

	local OldTarget = FlingTarget

	for i,v in game:GetService("Players"):GetPlayers() do

		if FlingWhitelist[v.UserId] then continue end

		FlingTarget = v

		Fling()

	end

	while FlingLoop do

		task.wait()

		for i,v in game:GetService("Players"):GetPlayers() do

			if FlingWhitelist[v.UserId] then continue end

			FlingTarget = v

			Fling()

		end

	end

	FlingTarget = OldTarget

end)

FlingKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	FlingKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			FlingKey = Inp.KeyCode
			FlingKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until FlingKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

FlingBox.FocusLost:Connect(function(EP)

	if not EP then return end

	local PlayerName = FlingBox.Text
	local PLayer

	for i,v in game:GetService("Players"):GetPlayers() do

		if PLayer then continue end

		if string.find(string.lower(v.DisplayName), string.lower(PlayerName)) then

			PLayer = v
			FlingTarget = v

		end

	end

	FlingBox.Text = "Player = " ..FlingTarget.DisplayName

end)

game:GetService("Players").PlayerRemoving:Connect(function(plr)

	if plr == FlingTarget then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Goat Hub",
			Text = "The targeted player of your fling (" ..FlingTarget.DisplayName.. ") has left changed target to you."
		})

		FlingTarget = game:GetService("Players"):GetPlayers()[1]
		FlingBox.Text = "Player = " ..FlingTarget.DisplayName

	end

end)

SitCheckButton.MouseButton1Down:Connect(function()

	FlingSitCheck = not FlingSitCheck
	SitCheckButton.Frame.Frame.Visible = FlingSitCheck

end)

FriendCheckButton.MouseButton1Down:Connect(function()

	FlingFriendCheck = not FlingFriendCheck
	FriendCheckButton.Frame.Frame.Visible = FlingFriendCheck

end)

FlingTeamCheckButton.MouseButton1Down:Connect(function()

	FlingTeamCheck = not FlingTeamCheck
	FlingTeamCheckButton.Frame.Frame.Visible = FlingTeamCheck

end)

FlingWhitelistButton.MouseButton1Down:Connect(function(x, y)

	FlingWhitelistFrame.Visible = not FlingWhitelistFrame.Visible
	FlingWhitelistFrame.Position = UDim2.fromOffset(x, y)

end)

FlingLoopButton.MouseButton1Down:Connect(function()

	FlingLoop = not FlingLoop
	FlingLoopButton.Frame.Frame.Visible = FlingLoop

end)

for i,v in game:GetService("Players"):GetPlayers() do

	table.insert(FlingToolParamsWhitelist, v)

	local UI = NewButton(v.UserId, FlingWhitelistFrame, v.DisplayName, #FlingWhitelistFrame:GetChildren())

	UI.Size = UDim2.new(0.9, 0, 0.025, 0)

	UI.MouseButton1Down:Connect(function()

		FlingWhitelist[v.UserId] = not FlingWhitelist[v.UserId]

		UI.Frame.Frame.Visible = FlingWhitelist[v.UserId]

	end)

	v.Destroying:Connect(function()

		UI:Destroy()

	end)

end

game:GetService("Players").PlayerAdded:Connect(function(v)

	table.insert(FlingToolParamsWhitelist, v)

	local UI = NewButton(v.UserId, FlingWhitelistFrame, v.DisplayName, #FlingWhitelistFrame:GetChildren())

	UI.Size = UDim2.new(0.9, 0, 0.025, 0)

	UI.MouseButton1Down:Connect(function()

		FlingWhitelist[v.UserId] = not FlingWhitelist[v.UserId]

		UI.Frame.Frame.Visible = FlingWhitelist[v.UserId]

	end)

end)

game:GetService("Players").PlayerRemoving:Connect(function(v)

	table.remove(FlingToolParamsWhitelist, table.find(FlingToolParamsWhitelist, v))

	local UI = FlingWhitelistFrame[v.UserId]

	UI:Destroy()

end)

FlingToolButton.MouseButton1Down:Connect(function()

	local Tool = FlingTool:Clone()
	local Highlight = Instance.new("Highlight")

	Highlight.FillTransparency = 0.5
	Highlight.FillColor = Color3.new(1, 0.580392, 0.0666667)	
	Highlight.OutlineColor = Color3.new(1, 0.580392, 0.0666667)	
	Tool.Parent = PLR.Backpack

	Tool.Activated:Connect(function()

		local MP = UIS:GetMouseLocation()
		local MR = Cam:ViewportPointToRay(MP.X, MP.Y)
		local Result = workspace:Raycast(MR.Origin, MR.Direction * 100000, FlingToolParams)

		if Result then

			if not Result.Instance:GetRootPart() then return end
			if not Result.Instance:GetRootPart().Parent then return end

			local plr = game:GetService("Players"):GetPlayerFromCharacter(Result.Instance:GetRootPart().Parent)

			if not plr then return end

			FlingTarget = plr
			FlingBox.Text = "Player = " ..FlingTarget.DisplayName
			Fling()

		end

	end)

	local function FindGuyIg()

		local Found

		if Tool.Parent == PLR.Character then

			local MP = UIS:GetMouseLocation()
			local MR = Cam:ViewportPointToRay(MP.X, MP.Y)
			local Result = workspace:Raycast(MR.Origin, MR.Direction * 100000, FlingToolParams)

			if Result then

				if not Result.Instance:GetRootPart() then return end
				if not Result.Instance:GetRootPart().Parent then return end

				local plr = game:GetService("Players"):GetPlayerFromCharacter(Result.Instance:GetRootPart().Parent)

				if not plr then return end

				Highlight.Parent = plr.Character
				Found = true

			end

		end

		return Found

	end

	while Tool.Parent do

		task.wait()

		local Found = FindGuyIg()

		if not Found then

			Highlight:Remove()

		end

	end

end)

DeleteToolButton.MouseButton1Down:Connect(function()

	local Tool = DeleteTool:Clone()
	local Highlight = Instance.new("Highlight")

	Highlight.FillTransparency = 0.5
	Highlight.FillColor = Color3.new(1, 0.580392, 0.0666667)	
	Highlight.OutlineColor = Color3.new(1, 0.580392, 0.0666667)	
	Tool.Parent = PLR.Backpack

	Tool.Activated:Connect(function()

		local MP = UIS:GetMouseLocation()
		local MR = Cam:ViewportPointToRay(MP.X, MP.Y)
		local Result = workspace:Raycast(MR.Origin, MR.Direction * 100000)

		if Result then
			
			print(Result.Instance.Parent)
			
			Result.Instance.Parent = nil
			Result.Instance:Destroy()
			
		end
		
	end)

	while task.wait() do
		
		local MP = UIS:GetMouseLocation()
		local MR = Cam:ViewportPointToRay(MP.X, MP.Y)
		local Result = workspace:Raycast(MR.Origin, MR.Direction * 100000)

		if Result then

			Highlight.Parent = Result.Instance

		end
		
	end

end)

-- Other

--ESP

local function ESPEnable()

	ESPEnabled = not ESPEnabled
	ESPEnabledButton.Frame.Frame.Visible = ESPEnabled

	if ESPEnabled then

		local Target = FindPlr()

		local function ESP(v : Player)

			if v == PLR then return end

			local Highlight = Instance.new("Highlight", v.Character)
			local Line = Instance.new("Frame", ESPGui)
			local LineOutline = Instance.new("UIStroke", Line)
			local Box = Instance.new("Frame", ESPGui)
			local BoxOutline = Instance.new("UIStroke", Box)
			local Box3d = Instance.new("Part", workspace)
			local AttLeft = Instance.new("Attachment", Box3d)
			local AttRight = Instance.new("Attachment", Box3d)
			local AttUp = Instance.new("Attachment", Box3d)
			local AttDown = Instance.new("Attachment", Box3d)

			Box3d.Anchored = true
			Box3d.CanCollide = nil
			Box3d.Transparency = 1
			Box.BackgroundTransparency = 1
			Box.AnchorPoint = Vector2.new(0.5,0.25)
			Line.Size = UDim2.new(0,0,0,0)
			Line.AnchorPoint = Vector2.new(0.5,0.5)
			LineOutline.Color = Color3.new(1,1,1)
			Highlight.FillTransparency = 1

			local function WorldToScreen(Pos) --This function gets a World Position (Pos) and returns a Vector2 value of the screen coordinates
				local M = PLR:GetMouse()

				local point = Cam.CoordinateFrame:pointToObjectSpace(Pos)
				local aspectRatio = M.ViewSizeX / M.ViewSizeY
				local hfactor = math.tan(math.rad(Cam.FieldOfView) / 2)
				local wfactor = aspectRatio*hfactor

				local x = (point.x/point.z) / -wfactor
				local y = (point.y/point.z) /  hfactor

				return Vector2.new(M.ViewSizeX * (0.5 + 0.5 * x), M.ViewSizeY * (0.5 + 0.5 * y))
			end

			task.spawn(function()

				local UI = Instance.new("TextLabel")

				while ESPEnabled and v.Parent == game:GetService("Players") do

					task.wait()

					if ESPOutlineType ~= "Highlight" then

						Highlight.Enabled = nil

					else

						Highlight.Enabled = true

					end

					if ESPOutlineType ~= "Box" then

						Box.Visible = nil

					else

						Box.Visible = true

					end

					if ESPLinesEnabled then

						Line.Visible = true

					else

						Line.Visible = nil

					end

					if v.Character then

						local Pos, IsOnScreen = Cam:WorldToScreenPoint(v.Character:GetPivot().Position)
						local Size
						local Char3DSize = v.Character:GetExtentsSize()

						Box3d.CFrame = v.Character:GetPivot()
						Box3d.Size = Char3DSize

						AttLeft.Position = Vector3.new(-Char3DSize.X / 2,0,0)
						AttRight.Position = Vector3.new(Char3DSize.X / 2,0,0)
						AttUp.Position = Vector3.new(0,Char3DSize.Y / 2,0)
						AttDown.Position = Vector3.new(0,-Char3DSize.Y / 2,0)

						local PosLeft = WorldToScreen(AttLeft.WorldPosition)
						local PosRight = WorldToScreen(AttRight.WorldPosition)
						local PosUp = WorldToScreen(AttUp.WorldPosition)
						local PosDown = WorldToScreen(AttDown.WorldPosition)
						local _, DownOnScreen = Cam:WorldToScreenPoint(AttDown.WorldPosition)

						local UdimAndNotVectorThingie = UDim2.fromOffset(PosDown.X, PosDown.Y)
						local viewportSize = Cam.ViewportSize

						Line.Position = UDim2.new(0.5,0,1,0)
						Line.Position = UDim2.fromOffset(
							Line.Position.X.Scale * viewportSize.X,
							Line.Position.Y.Scale * viewportSize.Y
						)
						Line.Size = UDim2.new(0, 0, 0, (Vector2.new(Line.Position.X.Offset,Line.Position.Y.Offset) - PosDown).Magnitude * 2)

						local Diff = UdimAndNotVectorThingie - Line.Position

						Line.Rotation = math.deg(math.atan2(Diff.Y.Offset, Diff.X.Offset)) - 90

						if not DownOnScreen then Line.Visible = nil end
						if not IsOnScreen then Box.Visible = nil end

						local Size = UDim2.new(0, (PosLeft - PosRight).Magnitude, 0, (PosUp - PosDown).Magnitude)

						if Target == v and ESPColorEnabled then

							LineOutline.Color = ESPColor
							BoxOutline.Color = ESPColor

						elseif not ESPTeamColor or not v.Team then

							LineOutline.Color = NotTargettedESPColor
							BoxOutline.Color = NotTargettedESPColor

						end

						if ESPColorEnabled then

							if Target == v then

								Highlight.OutlineColor = ESPColor
								UI.TextColor3 = ESPColor

							else

								Highlight.OutlineColor = NotTargettedESPColor
								UI.TextColor3 = NotTargettedESPColor

							end

						else

							Highlight.OutlineColor = NotTargettedESPColor
							UI.TextColor3 = NotTargettedESPColor

						end

						if ESPTeamColor and v.Team and v ~= Target then

							local Color = v.TeamColor.Color

							Highlight.OutlineColor = Color
							UI.TextColor3 = Color
							LineOutline.Color = Color
							BoxOutline.Color = Color

						end

						if v.Character:FindFirstChild("HumanoidRootPart") then

							Box.Size = Size
							Box.Position = UDim2.fromOffset(WorldToScreen(v.Character.HumanoidRootPart.Position).X, WorldToScreen(v.Character.HumanoidRootPart.Position).Y)							

						end

						Highlight.Parent = v.Character

					else

						Box.Visible = nil
						Line.Visible = nil

					end

					if ESPNameEnabled and v.Character then

						if not v.Character:FindFirstChild("Head") then UI:Remove() continue end

						local Pos, IsOnScreen = Cam.WorldToScreenPoint(Cam, v.Character.Head.Position)
						local Vec2Pos = WorldToScreen(v.Character.Head.Position)

						if not IsOnScreen then UI:Remove() continue end

						UI.Parent = ESPGui
						UI.AnchorPoint = Vector2.new(0.5,0)
						UI.Size = UDim2.new(0.061, 0,0.028, 0)
						UI.TextScaled = true
						UI.BackgroundTransparency = 1
						UI.Text = v.DisplayName
						UI.Font = Enum.Font.FredokaOne
						UI.Position = UDim2.fromOffset(Vec2Pos.X, Vec2Pos.Y)

					else

						UI:Remove()

					end

				end

			end)

			local OnRespawn = v.CharacterAdded:Connect(function()

				Highlight:Destroy()
				Highlight = Instance.new("Highlight", v.Character)
				Highlight.FillTransparency = 1

			end)

			task.spawn(function()

				while ESPEnabled do

					task.wait()

				end

				Highlight:Destroy()
				Line:Destroy()
				Box:Destroy()
				Box3d:Destroy()
				OnRespawn:Disconnect()

			end)

		end

		for i,v in game:GetService("Players"):GetPlayers() do

			ESP(v)

		end

		game:GetService("Players").PlayerAdded:Connect(ESP)

		while ESPEnabled do

			task.wait()

			Target = FindPlr()

		end

	else

		ESPGui:ClearAllChildren()

	end

end

local function ESPRainbowEnable()

	NotTargetedESPColorBox.Visible = ESPRainbowEnabled
	ESPTeamColorButton.Visible = ESPRainbowEnabled
	ESPRainbowEnabled = not ESPRainbowEnabled
	ESPRainbowButton.Frame.Frame.Visible = ESPRainbowEnabled

	if ESPRainbowEnabled then

		local RainbowVal = Instance.new("Color3Value")
		local ColorTbl = {
			BrickColor.Red().Color,
			BrickColor.Yellow().Color,
			BrickColor.Blue().Color,
			Color3.new(1,0,1),
			Color3.new(0.5,0,1)
		}

		task.spawn(function()

			while ESPRainbowEnabled do

				task.wait()

				NotTargettedESPColor = RainbowVal.Value

			end

		end)

		while ESPRainbowEnabled do

			task.wait()

			for i,v in ColorTbl do

				local TWER = TW:Create(RainbowVal, TweenInfo.new(1, Enum.EasingStyle.Linear), {Value = v})

				TWER:Play()
				TWER.Completed:Wait()

			end

		end

	else

		NotTargettedESPColor = NoEffectESPColor

		while not ESPRainbowEnabled do

			task.wait()

			NotTargettedESPColor = NoEffectESPColor

		end

	end

end

ESPKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	ESPKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			ESPKey = Inp.KeyCode
			ESPKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until ESPKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

ESPEnabledButton.MouseButton1Down:Connect(ESPEnable)
ESPRainbowButton.MouseButton1Down:Connect(ESPRainbowEnable)
ESPTeamColorButton.MouseButton1Down:Connect(function()

	ESPRainbowButton.Visible = ESPTeamColor
	ESPTeamColor = not ESPTeamColor
	ESPTeamColorButton.Frame.Frame.Visible = ESPTeamColor

end)

ESPNameEnabledButton.MouseButton1Down:Connect(function()

	ESPNameEnabled = not ESPNameEnabled
	ESPNameEnabledButton.Frame.Frame.Visible = ESPNameEnabled

end)

ESPColorEnabledButton.MouseButton1Down:Connect(function()

	ESPColorEnabled = not ESPColorEnabled
	ESPColorEnabledButton.Frame.Frame.Visible = ESPColorEnabled
	ESPColorBox.Visible = ESPColorEnabled

end)

ESPColorBox.FocusLost:Connect(function(EP)

	if not EP then return end

	local Colors = string.split(ESPColorBox.Text, ",")

	if not tonumber(Colors[1]) or not tonumber(Colors[2]) or not tonumber(Colors[3]) then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Error",
			Text = "Invalid color"
		})

		return

	end

	local R = tonumber(Colors[1])
	local G = tonumber(Colors[2])
	local B = tonumber(Colors[3])

	ESPColor = Color3.fromRGB(R,G,B)
	ESPColorBox.Text = "Color = " ..tostring(R).. "," ..tostring(G).. "," ..tostring(B)

end)

Tralalelotralala = Instance.new("Frame", TabsFrame)
Tralalelotralala.Visible = nil
Tralalelotralala.Name = "AdvancedESP"

ESPAdvancedButton.MouseButton1Down:Connect(function()

	if CurrentTab == "AdvancedESP" then return end

	TabsFrame[CurrentTab].BackgroundColor3 = Color3.fromRGB(70,70,70)

	for i,v in Tabs[CurrentTab] do

		v.Visible = nil

	end

	for i,v in Tabs["AdvancedESP"] do

		v.Visible = true

	end

	CurrentTab = "AdvancedESP"

end)

ESPOutlineTypeButton.MouseButton1Down:Connect(function()

	ESPTypeNum += 1

	if ESPTypeNum > #ESPOutlineTypes then

		ESPTypeNum = 1

	end

	ESPOutlineType = ESPOutlineTypes[ESPTypeNum]

	ESPOutlineTypeButton.TextLabel.Text = "Outline type = " ..ESPOutlineType

end)

ESPLinesButton.MouseButton1Down:Connect(function()

	ESPLinesEnabled = not ESPLinesEnabled
	ESPLinesButton.Frame.Frame.Visible = ESPLinesEnabled

end)

NotTargetedESPColorBox.FocusLost:Connect(function(EP)

	if not EP then return end

	local Colors = string.split(NotTargetedESPColorBox.Text, ",")

	if not tonumber(Colors[1]) or not tonumber(Colors[2]) or not tonumber(Colors[3]) then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Error",
			Text = "Invalid color"
		})

		return

	end

	local R = tonumber(Colors[1])
	local G = tonumber(Colors[2])
	local B = tonumber(Colors[3])

	if not ESPRainbowEnabled then

		NotTargettedESPColor = Color3.fromRGB(R,G,B)

	end

	NoEffectESPColor = Color3.fromRGB(R,G,B)
	NotTargetedESPColorBox.Text = "Color = " ..tostring(R).. "," ..tostring(G).. "," ..tostring(B)

end)

--Bang

local function BangEnable()

	BangEnabled = not BangEnabled
	BangEnabledButton.Frame.Frame.Visible = BangEnabled

	if BangEnabled then

		if not Char or Char.Humanoid.Health <= 0 then BangEnabled = nil return end
		if PLR == PlayerToBang then

			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Error",
				Text = "Tried to bang yourself please choose a valid player"
			})
			return
		end

		local Anim = Instance.new("Animation")

		if Char:FindFirstChild("LowerTorso") then

			Anim.AnimationId = "rbxassetid://5918726674"

		else

			Anim.AnimationId = "rbxassetid://148840371"

		end

		local Track = PLR.Character.Humanoid:LoadAnimation(Anim)

		Track:Play()

		while BangEnabled do

			task.wait()

			if not Char then continue end
			if not Char:FindFirstChild("HumanoidRootPart") then continue end

			if not PlayerToBang.Character:FindFirstChild("HumanoidRootPart") then

				Track:Stop()

				continue

			elseif Char.Humanoid.Health <= 0 then

				continue

			elseif not Track.IsPlaying and BangEnabled then

				Track:Play()

			end

			local Pos

			if BangType == "Back" then

				Pos = PlayerToBang.Character:GetPivot() * CFrame.new(0,0,Char.HumanoidRootPart.Size.Z)

			elseif BangType == "Front" then

				Pos = PlayerToBang.Character:GetPivot() * CFrame.new(Vector3.new(0,0,-Char.HumanoidRootPart.Size.Z), Vector3.new(0,0,180))

			else

				Pos = PlayerToBang.Character.Head.CFrame * CFrame.new(Vector3.new(0,0,-Char.HumanoidRootPart.Size.Z), Vector3.new(0,0,180))

			end 

			Char:PivotTo(Pos)

		end

		Track:Stop()

	end

end

game:GetService("Players").PlayerRemoving:Connect(function(plr)

	if plr == PlayerToBang then

		game:GetService("StarterGui"):SetCore("SendNotification", {
			Title = "Goat Hub",
			Text = "The targeted player of your bang (" ..PlayerToBang.DisplayName.. ") has left changed target to you."
		})

		BangEnabled = nil
		BangEnabledButton.Frame.Frame = BangEnabled
		PlayerToBang = game:GetService("Players"):GetPlayers()[1]
		BangPlayerBox.Text = "Player = " ..PlayerToBang.DisplayName

	end

end)


BangEnabledButton.MouseButton1Down:Connect(BangEnable)

BangKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	BangKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			BangKey = Inp.KeyCode
			BangKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until BangKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

BangPlayerBox.FocusLost:Connect(function(EP)

	if not EP then return end

	local PlayerName = BangPlayerBox.Text
	local PLayer

	for i,v in game:GetService("Players"):GetPlayers() do

		if PLayer then continue end

		if string.find(string.lower(v.DisplayName), string.lower(PlayerName)) then

			PLayer = v
			PlayerToBang = v

		end

	end

	BangPlayerBox.Text = "Player = " ..PlayerToBang.DisplayName

end)

BTypeButton.MouseButton1Down:Connect(function(PosX, PosY)

	BTypeFrame.Position = UDim2.new(0,PosX,0,PosY)
	BTypeFrame.Visible = true

end)

Back.MouseButton1Down:Connect(function()

	BTypeFrame.Visible = nil
	BangType = "Back"
	BTypeButton.TextLabel.Text = "Type = Back"

end)

Front.MouseButton1Down:Connect(function()

	BTypeFrame.Visible = nil
	BangType = "Front"
	BTypeButton.TextLabel.Text = "Type = Front"

end)

Mouth.MouseButton1Down:Connect(function()

	BTypeFrame.Visible = nil
	BangType = "Mouth"
	BTypeButton.TextLabel.Text = "Type = Mouth"

end)

--Chat

Talk = function(message)

	if game:GetService('TextChatService').ChatVersion == Enum.ChatVersion.LegacyChatService then

		game:GetService('ReplicatedStorage'):WaitForChild('DefaultChatSystemChatEvents'):WaitForChild('SayMessageRequest'):FireServer(message, 'All')

	else

		game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(message)

	end

end

--Rizz talk

local function RTEnable()

	Talk(RTMessages[math.random(1, #RTMessages)])

end

RTEnabledButton.MouseButton1Down:Connect(RTEnable)

RTKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	RTKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			RTKey = Inp.KeyCode
			RTKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until RTKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

--Trash talk

local function TTEnable()

	Talk(TTMessages[math.random(1, #TTMessages)])

end

TTEnabledButton.MouseButton1Down:Connect(TTEnable)

TTKeybindButton.MouseButton1Down:Connect(function()

	if BindingKey then return end

	BindingKey = true
	TTKeybindButton.TextLabel.Text = "..."

	local Connection = UIS.InputBegan:Connect(function(Inp, GPE)

		if GPE then return end

		if Inp.UserInputType == Enum.UserInputType.Keyboard then

			TTKey = Inp.KeyCode
			TTKeybindButton.TextLabel.Text = "Keybind = " ..string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), -1)

		end


	end)

	repeat wait() until TTKeybindButton.TextLabel.Text ~= "..."

	Connection:Disconnect()
	BindingKey = nil

end)

--Chat Art

for i,v in ChatArtColorsToText do

	local Button = Instance.new("TextButton", ChatArtButtonsFrame)
	local Corner = Instance.new("UICorner", Button)
	local Ratio = Instance.new("UIAspectRatioConstraint", Button)

	Button.Text = ""
	Button.Name = tostring(i)
	Button.BackgroundColor3 = i
	Button.Size = UDim2.fromScale(0.5, 0.5)

	Corner.CornerRadius = UDim.new(1, 0)

	Button.MouseButton1Down:Connect(function()

		ChatArtColor = i

	end)

end

for i = 1, 49 do

	local Button = Instance.new("TextButton", ChatArtEditFrame)
	local Corner = Instance.new("UICorner", Button)

	Button.Text = ""
	Button.Name = i
	Button.LayoutOrder = i
	Button.BackgroundColor3 = Color3.new(1,1,1)

	Corner.CornerRadius = UDim.new(1, 0)

	Button.MouseButton1Down:Connect(function()

		if Button.BackgroundColor3 == ChatArtColor then

			Button.BackgroundColor3 = Color3.new(1,1,1) 

		else

			Button.BackgroundColor3 = ChatArtColor

		end

	end)

end

ChatArtButton.MouseButton1Down:Connect(function()

	ChatArtFrame.Size = UDim2.new(0.5,0,0,0)
	ChatArtFrame.ExitButton.Visible = nil
	ChatArtFrame.Visible = true
	MenuFrame.Visible = nil
	ChatArtRatio:Remove()

	local TWCAF = TW:Create(ChatArtFrame, TweenInfo.new(0.5), {Size = UDim2.new(0.5,0,0.5,0)})
	TWCAF:Play()
	TWCAF.Completed:Wait()

	ChatArtRatio.Parent = ChatArtFrame
	ChatArtFrame.ExitButton.Visible = true

end)

ChatArtFrame.ExitButton.MouseButton1Down:Connect(function()

	ChatArtRatio:Remove()

	local TWCAF = TW:Create(ChatArtFrame, TweenInfo.new(0.5), {Size = UDim2.new(0.5,0,0,0)})
	TWCAF:Play()
	TWCAF.Completed:Wait()

	ChatArtRatio.Parent = ChatArtFrame
	ChatArtFrame.Visible = nil
	MenuFrame.Visible = true

end)

ChatArtSendButton.MouseButton1Down:Connect(function()

	local Msg = ""
	local ThingIg = 0

	for i,v in ChatArtEditFrame:GetChildren() do

		if not v:IsA("TextButton") then continue end

		local Key = Color3.new(v.BackgroundColor3.R, v.BackgroundColor3.G, v.BackgroundColor3.B)

		ThingIg += 1
		Msg = Msg..ChatArtColorsToTextFrThisTime[tostring(Key)]

		if ThingIg == 7 then

			Talk(Msg)

			Msg = ""
			ThingIg = 0
			task.wait(0.5)

		end

	end

end)

Loaded += 1

TWL:Cancel()
TWL = TW:Create(LoadingBar, TweenInfo.new(0.25), {Size = UDim2.new(Loaded / TotalToLoad,0,1,0)})
TWL:Play()
TWL.Completed:Wait()

--Inputs

UIS.InputBegan:Connect(function(Inp, GPE)

	if BindingKey then return end

	if Inp.KeyCode == Key then

		MenuUI.Enabled = not MenuUI.Enabled

		if not MenuUI.Enabled then

			UIS.MouseBehavior = MouseBehavior
			UIS.MouseIconEnabled = MouseVisible

		end

	end

	if GPE then return end
	if not KeybindsActive and not table.find(KeybindsWhitelist, string.sub(tostring(Inp.KeyCode), #tostring(Inp.KeyCode), #tostring(Inp.KeyCode))) then return end

	if Inp.KeyCode == FlyKey and FlyKeybindButton.Visible then

		FlyActivate()

	elseif Inp.KeyCode == InfJumpKey and InfJumpKeybindButton.Visible then

		InfJumpEnable()

	elseif Inp.KeyCode == SpeedKey and SpeedKeybindButton.Visible and Ver ~= "Safe" then

		SpeedActivate()

	elseif Inp.KeyCode == ESPKey and ESPKeybindButton.Visible then

		ESPEnable()

	elseif Inp.KeyCode == CTPKey and CTPKeybindButton.Visible then

		CTPEnable()

	elseif Inp.KeyCode == BangKey and BangKeybindButton.Visible then

		BangEnable()

	elseif Inp.KeyCode == PTPKey and PTPKeybindButton.Visible then

		PTPEnable()

	elseif Inp.KeyCode == RTKey and RTKeybindButton.Visible then

		RTEnable()

	elseif Inp.KeyCode == TTKey and TTKeybindButton.Visible then

		TTEnable()

	elseif Inp.KeyCode == CLockKey and CLockKeybindButton.Visible then

		CLockEnable()

	elseif Inp.KeyCode == AimbotKey and AimbotKeybindButton.Visible and not TriggerbotEnabled then

		AimbotEnable()

	elseif Inp.KeyCode == FlingKey and FlingKeybindButton.Visible then

		Fling()

	elseif Inp.KeyCode == TriggerbotKeybind and TriggerbotKeybindButton.Visible then

		TriggerbotEnable()

	end

end)

-- Fixing the death problem

PLR.CharacterAdded:Connect(function(char)

	Char = char

end)

OldMouse = UIS.MouseBehavior
UIS.MouseBehavior = Enum.MouseBehavior.Default

game:GetService("StarterGui"):SetCore("SendNotification", {
	Title = "Goat Hub",
	Text = "Done"
})

local TWLF = TW:Create(LoadingBar, TweenInfo.new(0.5), {BackgroundTransparency = 1})
local TWMF = TW:Create(MenuFrame, TweenInfo.new(0.5), {BackgroundTransparency = 0.25})

LoadingFrame.BackgroundTransparency = 1
TWLF:Play()
TWLF.Completed:Wait()
LoadingFrame:Destroy()
NameLabel.Text = "GH Universal"
TWMF:Play()
TWMF.Completed:Wait()

TabsFrame.Visible = true
CurrentTab = "Home"

for i,v in Tabs[CurrentTab] do

	v.Visible = true

end


while task.wait() do

	FlingToolParams.FilterDescendantsInstances = FlingToolParamsWhitelist

	if Ver == "Safe" then

		AlwaysEnabled.Parent = game:GetService("CoreGui").CaptureOverlay

	else

		AlwaysEnabled.Parent = game:GetService("CoreGui")

	end

	if CurrentTab ~= "Home" then

		WhitelistFrame.Visible = nil

	end

	if CurrentTab ~= "Fling" then

		FlingWhitelistFrame.Visible = nil

	end

	if CLockFovEnabled then

		local MP = UIS:GetMouseLocation()

		FovFrame.AnchorPoint = Vector2.new(0.5,0.5)
		FovFrame.Position = UDim2.new(0, MP.X, 0, MP.Y - 50)
		FovFrame.Size = UDim2.new(0, FovSize * 1.75, 0, FovSize * 1.75)
		FovFrame.Visible = FovVisible

	else

		FovFrame.Visible = nil

	end

	if MenuUI.Enabled then

		UIS.MouseBehavior = Enum.MouseBehavior.Default
		UIS.MouseIconEnabled = true
		Cursor.Visible = CustomCursor
		Cursor.Position = UDim2.fromOffset(UIS:GetMouseLocation().X, UIS:GetMouseLocation().Y)

	end

end
